<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Client.Lightweight-3.5</name>
    </assembly>
    <members>
        <member name="T:Raven.Client.Client.HttpJsonRequest">
            <summary>
            A representation of an HTTP json request to the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.BeginReadResponseString(System.AsyncCallback,System.Object)">
            <summary>
            Begins the read response string.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.EndReadResponseString(System.IAsyncResult)">
            <summary>
            Ends the reading of the response string.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.ReadResponseString">
            <summary>
            Reads the response string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.Write(System.String)">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.Write(System.Byte[])">
            <summary>
            Writes the specified byte array.
            </summary>
            <param name="byteArray">The byte array.</param>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.BeginWrite(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Begins the write operation
            </summary>
            <param name="byteArray">The byte array.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.EndWrite(System.IAsyncResult)">
            <summary>
            Ends the write operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.AddOperationHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.AddOperationHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="P:Raven.Client.Client.HttpJsonRequest.ResponseHeaders">
            <summary>
            Gets or sets the response headers.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="P:Raven.Client.Client.HttpJsonRequest.ResponseStatusCode">
            <summary>
            Gets or sets the response status code.
            </summary>
            <value>The response status code.</value>
        </member>
        <member name="T:Raven.Client.Client.HttpJsonRequestFactory">
            <summary>
             Create the HTTP Json Requests to the RavenDB Server
             and manages the http cache
            </summary>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequestFactory.CreateHttpJsonRequest(System.Object,System.String,System.String,System.Net.ICredentials,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the HTTP json request.
            </summary>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequestFactory.CreateHttpJsonRequest(System.Object,System.String,System.String,Newtonsoft.Json.Linq.JObject,System.Net.ICredentials,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the HTTP json request.
            </summary>
            <param name="self">The self.</param>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <param name="metadata">The metadata.</param>
            <param name="credentials">The credentials.</param>
            <param name="convention">The document conventions governing this request</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequestFactory.ResetCache">
            <summary>
            Reset the number of cached requests and clear the entire cache
            Mostly used for testing
            </summary>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequestFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="E:Raven.Client.Client.HttpJsonRequestFactory.ConfigureRequest">
            <summary>
            Occurs when a json request is created
            </summary>
        </member>
        <member name="P:Raven.Client.Client.HttpJsonRequestFactory.NumberOfCachedRequests">
            <summary>
            The number of requests that we got 304 for 
            and were able to handle purely from the cache
            </summary>
        </member>
        <member name="T:Raven.Client.Client.IDatabaseCommands">
            <summary>
             Expose the set of operations by the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.StartsWith(System.String,System.Int32,System.Int32)">
            <summary>
            Gets documents for the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Get(System.String)">
            <summary>
            Gets the document for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Get(System.String[],System.String[])">
            <summary>
            Gets the results for the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Put(System.String,System.Nullable{System.Guid},Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Delete(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the document with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutAttachment(System.String,System.Nullable{System.Guid},System.Byte[],Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.GetAttachment(System.String)">
            <summary>
            Gets the attachment by the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.DeleteAttachment(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.GetIndexNames(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.ResetIndex(System.String)">
            <summary>
            Resets the specified index
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.GetIndex(System.String)">
            <summary>
            Gets the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition)">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1})">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1},System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Query(System.String,Raven.Database.Data.IndexQuery,System.String[])">
            <summary>
            Queries the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The includes.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.DeleteIndex(System.String)">
            <summary>
            Deletes the index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Batch(System.Collections.Generic.IEnumerable{Raven.Database.Data.ICommandData})">
            <summary>
            Executed the specified commands as a single batch
            </summary>
            <param name="commandDatas">The command data.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information.
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Client.IDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.DeleteByIndex(System.String,Raven.Database.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.UpdateByIndex(System.String,Raven.Database.Data.IndexQuery,Raven.Database.Json.PatchRequest[],System.Boolean)">
            <summary>
            Perform a set based update using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Client.IDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.GetRootDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Client.IDatabaseCommands"/> that will interact
            with the root database. Useful if the database has works against a tenant database.
            </summary>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Suggest(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.GetTerms(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index 
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Client.IDatabaseCommands.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Client.IDatabaseCommands.SupportsPromotableTransactions">
            <summary>
            Gets a value indicating whether [supports promotable transactions].
            </summary>
            <value>
            	<c>true</c> if [supports promotable transactions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Client.JsonExtensions">
            <summary>
            Extension to json objects
            </summary>
        </member>
        <member name="M:Raven.Client.Client.JsonExtensions.Deserialize``1(Newtonsoft.Json.Linq.JObject,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <typeparam name="T"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Client.JsonExtensions.Deserialize(Newtonsoft.Json.Linq.JObject,System.Type,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <param name="type"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="T:Raven.Database.Json.JsonLuceneDateTimeConverter">
            <summary>
            Convert a lucene data format to and from json values
            </summary>
        </member>
        <member name="M:Raven.Database.Json.JsonLuceneDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Database.Json.JsonLuceneDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Database.Json.JsonLuceneDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Database.Json.JsonLuceneDateTimeConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Client.RavenQuery">
            <summary>
            Helper class that provide a way to escape query terms
            </summary>
        </member>
        <member name="M:Raven.Client.Client.RavenQuery.Escape(System.String)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
        </member>
        <member name="M:Raven.Client.Client.RavenQuery.Escape(System.String,System.Boolean)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
            <param name="term"></param>
            <param name="allowWildcards"></param>
            <returns>escaped term</returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Escaping%20Special%20Characters
            </remarks>
        </member>
        <member name="T:Raven.Client.Client.RavenTransactionAccessor">
            <summary>
            Provide access to the current transaction 
            </summary>
        </member>
        <member name="M:Raven.Client.Client.RavenTransactionAccessor.GetTransactionInformation">
            <summary>
            Gets the transaction information for the current transaction
            </summary>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Client.ReplicationInformer">
            <summary>
            Replication and failover management on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.#ctor(Raven.Client.Document.DocumentConvention)">
            <summary>
             Create a new instance of this class
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.UpdateReplicationInformationIfNeeded(Raven.Client.Client.ServerClient)">
            <summary>
            Updates the replication information if needed.
            </summary>
            <param name="serverClient">The server client.</param>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.ShouldExecuteUsing(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Should execute the operation using the specified operation URL
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.IsFirstFailure(System.String)">
            <summary>
            Determines whether this is the first failure on the specified operation URL.
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.IncrementFailureCount(System.String)">
            <summary>
            Increments the failure count for the specified operation URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.RefreshReplicationInformation(Raven.Client.Client.ServerClient)">
            <summary>
            Refreshes the replication information.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.ResetFailureCount(System.String)">
            <summary>
            Resets the failure count for the specified URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="P:Raven.Client.Client.ReplicationInformer.ReplicationDestinations">
            <summary>
            Gets the replication destinations.
            </summary>
            <value>The replication destinations.</value>
        </member>
        <member name="T:Raven.Client.Client.SerializationHelper">
            <summary>
             Helper method to do serialization from JObject to JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Client.SerializationHelper.JObjectsToJsonDocuments(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
             Translate a collection of JObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Client.SerializationHelper.ToJsonDocuments(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
             Translate a collection of JObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Client.SerializationHelper.ToJsonDocument(Newtonsoft.Json.Linq.JObject)">
            <summary>
             Translate a collection of JObject to JsonDocuments
            </summary>
        </member>
        <member name="T:Raven.Client.Client.ServerClient">
            <summary>
            Access the RavenDB operations using HTTP
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.Net.ICredentials,Raven.Client.Client.ReplicationInformer,Raven.Client.Client.HttpJsonRequestFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Client.ServerClient"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="convention">The convention.</param>
            <param name="credentials">The credentials.</param>
            <param name="replicationInformer">The replication informer.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Get(System.String)">
            <summary>
            Gets the document for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.StartsWith(System.String,System.Int32,System.Int32)">
            <summary>
            Gets documents for the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.ExecuteGetRequest(System.String)">
            <summary>
            Execute a GET request against the provided url
            and return the result as a string
            </summary>
            <param name="requestUrl">The relative url to the server</param>
            <remarks>
            This method respects the replication semantics against the database.
            </remarks>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DirectGet(System.String,System.String)">
            <summary>
            Perform a direct get for a document with the specified key on the specified server URL.
            </summary>
            <param name="serverUrl">The server URL.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Put(System.String,System.Nullable{System.Guid},Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Delete(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the document with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutAttachment(System.String,System.Nullable{System.Guid},System.Byte[],Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.GetAttachment(System.String)">
            <summary>
            Gets the attachment by the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DeleteAttachment(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.GetIndexNames(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.ResetIndex(System.String)">
            <summary>
            Resets the specified index
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.GetIndex(System.String)">
            <summary>
            Gets the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition)">
            <summary>
            Puts the index.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1})">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1},System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Query(System.String,Raven.Database.Data.IndexQuery,System.String[])">
            <summary>
            Queries the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DeleteIndex(System.String)">
            <summary>
            Deletes the index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Get(System.String[],System.String[])">
            <summary>
            Gets the results for the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DirectGet(System.String[],System.String,System.String[])">
            <summary>
            Perform a direct get for loading multiple ids in one request
            </summary>
            <param name="ids">The ids.</param>
            <param name="operationUrl">The operation URL.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Batch(System.Collections.Generic.IEnumerable{Raven.Database.Data.ICommandData})">
            <summary>
            Executed the specified commands as a single batch
            </summary>
            <param name="commandDatas">The command data.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information.
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Client.IDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Client.IDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.GetRootDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Client.IDatabaseCommands"/> that will interact
            with the root database. Useful if the database has works against a tenant database.
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DeleteByIndex(System.String,Raven.Database.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.UpdateByIndex(System.String,Raven.Database.Data.IndexQuery,Raven.Database.Json.PatchRequest[],System.Boolean)">
            <summary>
            Perform a set based update using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Suggest(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.GetTerms(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index 
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Client.ServerClient.ReplicationInformer">
            <summary>
            Allow access to the replication informer used to determine how we replicate requests
            </summary>
        </member>
        <member name="P:Raven.Client.Client.ServerClient.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Client.ServerClient.SupportsPromotableTransactions">
            <summary>
            Gets a value indicating whether [supports promotable transactions].
            </summary>
            <value>
            	<c>true</c> if [supports promotable transactions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.Client.ServerClient.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:Raven.Client.Client.WebRequestEventArgs">
            <summary>
            Event arguments for the event of creating a <see cref="T:System.Net.WebRequest"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Client.WebRequestEventArgs.Request">
            <summary>
            Gets or sets the web request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="T:Raven.Client.Client.WebResponseExtensions">
            <summary>
            Extensions for web requests
            </summary>
        </member>
        <member name="M:Raven.Client.Client.WebResponseExtensions.GetResponseStreamWithHttpDecompression(System.Net.WebResponse)">
            <summary>
            Gets the response stream with HTTP decompression.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Converters.GuidConverter">
            <summary>
            Convert strings from / to guids
            </summary>
        </member>
        <member name="T:Raven.Client.Converters.ITypeConverter">
            <summary>
            Interface for performing type conversions.
            We couldn't use the built-in TypeConverter because it is too big an interface for people to build on.
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the given object to the type of this converter.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int32Converter">
            <summary>
            Convert strings from / to int32
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertFrom(System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int64Converter">
            <summary>
            Convert strings from / to int64
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertFrom(System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Document.DefaultRavenContractResolver">
            <summary>
            The default json contract will serialize all properties and all public fields
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DefaultRavenContractResolver"/> class.
            </summary>
            <param name="shareCache">If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="T:Raven.Client.Document.DocumentConvention">
            <summary>
            The set of conventions used by the <see cref="T:Raven.Client.Document.DocumentStore"/> which allow the users to customize
            the way the Raven client API behaves
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentConvention"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKeyUsingIdentity(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key using identity.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultTypeTagName(System.Type)">
            <summary>
            Get the default tag name for the specified type.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetTypeTagName(System.Type)">
            <summary>
            Gets the name of the type tag.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKey(System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetIdentityProperty(System.Type)">
            <summary>
            Gets the identity property.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.CreateSerializer">
            <summary>
            Creates the serializer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrType(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Get the CLR type (if exists) from the document
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FailoverBehavior">
            <summary>
            How should we behave in a replicated environment when we can't 
            reach the primary node and need to failover to secondary node(s).
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.CustomizeJsonSerializer">
            <summary>
            Register an action to customize the json serializer used by the <see cref="T:Raven.Client.Document.DocumentStore"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityTypeConvertors">
            <summary>
             A list of type converters that can be used to translate the document key (string)
             to whatever type it is that is used on the entity, if the type isn't already a string
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityPartsSeparator">
            <summary>
            Gets or sets the identity parts separator used by the hilo generators
            </summary>
            <value>The identity parts separator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the default max number of requests per session.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrType">
            <summary>
            Gets or sets the function to find the clr type of a document.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.JsonContractResolver">
            <summary>
            Gets or sets the json contract resolver.
            </summary>
            <value>The json contract resolver.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindTypeTagName">
            <summary>
            Gets or sets the function to find the type tag.
            </summary>
            <value>The name of the find type tag.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForDynamicIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ShouldCacheRequest">
            <summary>
            Whatever or not RavenDB should cache the request to the specified url.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityProperty">
            <summary>
            Gets or sets the function to find the identity property.
            </summary>
            <value>The find identity property.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityPropertyNameFromEntityName">
            <summary>
            Get or sets the function to get the identity property name from the entity name
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DocumentKeyGenerator">
            <summary>
            Gets or sets the document key generator.
            </summary>
            <value>The document key generator.</value>
        </member>
        <member name="T:Raven.Client.Document.AbstractDocumentQuery`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryCustomization">
            <summary>
            Customize the document query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.CreateQueryForSelectedFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="T:Raven.Client.Client.IRavenQueryInspector">
            <summary>
            Provide access to the underlying <see cref="T:Raven.Client.IDocumentQuery`1"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Client.IRavenQueryInspector.GetLastEqualityTerm">
            <summary>
            The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="P:Raven.Client.Client.IRavenQueryInspector.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Client.IRavenQueryInspector.DatabaseCommands">
            <summary>
            Grant access to the database commands
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.negate">
            <summary>
            Whatever to negate the next operation
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theDatabaseCommands">
            <summary>
            The database commands to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.indexName">
            <summary>
            The index to query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.projectionFields">
            <summary>
              The list of fields to project directly from the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryListeners">
            <summary>
            The query listeners for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theSession">
            <summary>
            The session for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.cutoff">
            <summary>
              The cutoff date to use for detecting staleness in the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.orderByFields">
            <summary>
              The fields to order the results by
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.sortByHints">
            <summary>
              The types to sort the fields by (NULL if not specified)
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.pageSize">
            <summary>
              The page size to use when querying the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theQueryText">
            <summary>
            The query to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.start">
            <summary>
              which record to start reading from
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.timeout">
            <summary>
            Timeout for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theWaitForNonStaleResults">
            <summary>
            Should we wait for non stale results
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.includes">
            <summary>
            The paths to include when loading the query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.aggregationOp">
            <summary>
            What aggregated operation to execute
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.groupByFields">
            <summary>
            Fields to group on
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Client.IDatabaseCommands,System.String,System.String[],Raven.Client.IDocumentQueryListener[])">
            <param name = "indexName">Name of the index.</param>
            <param name = "projectionFields">The projection fields.</param>
            <param name = "theSession">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.AbstractDocumentQuery{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#CreateQueryForSelectedFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CreateQueryForSelectedFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateQueryWithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetEnumerator">
            <summary>
              Gets the enumerator.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(Raven.Client.WhereEqualsParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Object)">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Object[])">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
            </summary>
            <remarks>
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </remarks>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetQueryResult">
            <summary>
              Gets the query result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateIndexQuery(System.String)">
            <summary>
              Generates the index query.
            </summary>
            <param name = "query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetLastEqualityTerm">
            <summary>
              The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DatabaseCommands">
            <summary>
              Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.Session">
            <summary>
              Gets the session associated with this document query
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryText">
            <summary>
              Gets the query text built so far
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryResult">
            <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="T:Raven.Client.Document.DocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryBase`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(Raven.Client.WhereEqualsParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Object)">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Object[])">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SortByDistance">
            <summary>
              Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
            </summary>
            <remarks>
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </remarks>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.Not">
            <summary>
              Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="P:Raven.Client.IDocumentQuery`1.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQuery`1.QueryResult">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Client.IDatabaseCommands,System.String,System.String[],Raven.Client.IDocumentQueryListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.DocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.CreateQueryForSelectedFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
            Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OpenSubclause">
            <summary>
            Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#CloseSubclause">
            <summary>
            Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
             Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
             <remarks>
             This is only valid on dynamic indexes queries
             </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(Raven.Client.WhereEqualsParams)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereContains(System.String,System.Object)">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereContains(System.String,System.Object[])">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.GenerateQueryWithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#SortByDistance">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            </summary>
            <remarks>
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </remarks>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentQuery`1.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentSession">
            <summary>
            Implements Unit of Work for accessing the RavenDB server
            </summary>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations">
            <summary>
            Abstract implementation for in memory session operations
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.deletedEntities">
            <summary>
            The entities waiting to be deleted
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesAndMetadata">
            <summary>
            hold the data required to manage the data for RavenDB's Unit of Work
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesByKey">
            <summary>
            Translate between a key and its associated entity
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.documentStore">
            <summary>
            The document store associated with this session
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.queryListeners">
            <summary>
            The query listeners allow to modify queries before it is executed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.IDocumentQueryListener[],Raven.Client.IDocumentStoreListener[],Raven.Client.IDocumentDeleteListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.InMemoryDocumentSessionOperations"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="storeListeners">The store listeners.</param>
            <param name="deleteListeners">The delete listeners.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(Raven.Database.JsonDocument)">
            <summary>
            Tracks the entity inside the unit of work
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documentFound">The document found.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Tracks the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when SaveChanges is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity``1(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Converts the json document to an entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <param name="documentFound">The document found.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrySetIdentity``1(``0,System.String)">
            <summary>
            Tries to set the identity property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetOrGenerateDocumentKey(System.Object)">
            <summary>
            Tries to get the identity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TryGetIdFromInstance(System.Object,System.String@)">
            <summary>
            Attempts to get the document key from an instance 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.CreatePutEntityCommand(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Creates the put entity command.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.UpdateBatchResults(System.Collections.Generic.IList{Raven.Database.BatchResult},System.Collections.Generic.IList{System.Object})">
            <summary>
            Updates the batch results.
            </summary>
            <param name="batchResults">The batch results.</param>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PrepareForSaveChanges">
            <summary>
            Prepares for save changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntityChanged(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Determines if the entity have changed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ClearEnlistment">
            <summary>
            Clears the enlistment.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritive information if encountered non authoritive document.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            This is mostly useful when using sharding.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Http.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="E:Raven.Client.Document.InMemoryDocumentSessionOperations.Stored">
            <summary>
            Occurs when an entity is stored in the session
            </summary>
        </member>
        <member name="E:Raven.Client.Document.InMemoryDocumentSessionOperations.OnEntityConverted">
            <summary>
            Occurs when an entity is converted to a document and metadata.
            Changes made to the document / metadata instances passed to this event will be persisted.
            </summary>
        </member>
        <member name="E:Raven.Client.Document.InMemoryDocumentSessionOperations.OnDocumentConverted">
            <summary>
            Occurs when a document and metadata are converted to an entity
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.AllowNonAuthoritiveInformation">
            <summary>
            Gets or sets a value indicating whether non authoritive information is allowed.
            Non authoritive information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritive document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout"/> for the transaction to commit to get an
            authoritive information. If the wait is longer than <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritive information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata">
            <summary>
            Metadata held about an entity by the session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ETag">
            <summary>
            Gets or sets the ETag.
            </summary>
            <value>The ETag.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalMetadata">
            <summary>
            Gets or sets the original metadata.
            </summary>
            <value>The original metadata.</value>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData">
            <summary>
            Data for a batch command to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Commands">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Entities">
            <summary>
            Gets or sets the entities.
            </summary>
            <value>The entities.</value>
        </member>
        <member name="T:Raven.Client.IDocumentSession">
            <summary>
            Interface for document session
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String[])">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object)">
            <summary>
            Stores the specified dynamic entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Raven.Client.IDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.ITransactionalDocumentSession">
            <summary>
            Implementors of this interface provide transactional operations
            Note that this interface is mostly useful only for expert usage
            </summary>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Commit(System.Guid)">
            <summary>
            Commits the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns>The token representing the distributed transaction</returns>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information for the specified transaction
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="P:Raven.Client.ITransactionalDocumentSession.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="T:Raven.Client.ISyncAdvancedSessionOperation">
            <summary>
            Advanced synchronous session operations
            </summary>
        </member>
        <member name="T:Raven.Client.IAdvancedDocumentSessionOperations">
            <summary>
            Advanced session operations
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            If the entity is transient, it will load the metadata from the store
            and associate the current state of the entity with the metadata from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id for the specified entity.
            </summary>
            <remarks>
            This function may return <c>null</c> if the entity isn't tracked by the session, or if the entity is 
            a new entity with a key that should be generated on the server. 
            </remarks>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance. 
            This is mostly useful when using sharding.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Http.Exceptions.ConcurrencyException"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.AllowNonAuthoritiveInformation">
            <summary>
            Gets or sets a value indicating whether non authoritive information is allowed.
            Non authoritive information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritive document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritiveInformationTimeout"/> for the transaction to commit to get an
            authoritive information. If the wait is longer than <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritiveInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritive information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritiveInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritive information if encountered non authoritive document.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
        </member>
        <member name="E:Raven.Client.IAdvancedDocumentSessionOperations.Stored">
            <summary>
            Occurs after an entity is stored in RavenDB.
            This event is raised for new and updated entities.
            </summary>
        </member>
        <member name="E:Raven.Client.IAdvancedDocumentSessionOperations.OnEntityConverted">
            <summary>
            Occurs when an entity is converted to a document and metadata.
            Changes made to the document / metadata instances passed to this event will be persisted.
            </summary>
        </member>
        <member name="E:Raven.Client.IAdvancedDocumentSessionOperations.OnDocumentConverted">
            <summary>
            Occurs when a document and metadata are converted to an entity
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="T:Raven.Client.Linq.IDocumentQueryGenerator">
            <summary>
             Generate a new document query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.Query``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IDocumentQueryGenerator.Conventions">
            <summary>
            Gets the conventions asosciated with this query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.IDocumentQueryListener[],Raven.Client.IDocumentStoreListener[],Raven.Client.IDocumentDeleteListener[],Raven.Client.Client.IDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentSession"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String[])">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information for the specified transaction
            </summary>
            <param name="resourceManagerId"></param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#Query``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DocumentStore">
            <summary>
            Manages access to RavenDB and open sessions to work with RavenDB.
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentStore">
            <summary>
            Interface for managing access to RavenDB and open sessions.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.RegisterListener(Raven.Client.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.RegisterListener(Raven.Client.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession(System.String,System.Net.ICredentials)">
            <summary>
            Opens the session for a particular database with the specified credentials
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession(System.Net.ICredentials)">
            <summary>
            Opens the session with the specified credentials.
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="P:Raven.Client.IDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Client.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="E:Raven.Client.IDocumentStore.Stored">
            <summary>
            Occurs when an entity is stored inside any session opened from this instance
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="F:Raven.Client.Document.DocumentStore.databaseCommandsGenerator">
            <summary>
            Generate new instance of database commands
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentStore"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.ProcessConnectionStringOption(System.Net.NetworkCredential,System.String,System.String)">
            <summary>
            Parse the connection string option
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession(System.Net.ICredentials)">
            <summary>
            Opens the session with the specified credentials.
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession(System.String,System.Net.ICredentials)">
            <summary>
            Opens the session for a particular database with the specified credentials
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.InitializeInternal">
            <summary>
            Initialize the document store access method to RavenDB
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.IDocumentQueryListener)">
            <summary>
            Registers the query listener.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.IDocumentConversionListener)">
            <summary>
            Registers the convertion listener.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.JsonRequestFactory">
            <summary>
             Get the <see cref="T:Raven.Client.Client.HttpJsonRequestFactory"/> for the stores
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="E:Raven.Client.Document.DocumentStore.Stored">
            <summary>
            Occurs when an entity is stored inside any session opened from this instance
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string name.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DefaultDatabase">
            <summary>
            Gets or sets the default database name.
            </summary>
            <value>The default database name.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ResourceManagerId">
            <summary>
            The resource manager id for the document store.
            IMPORTANT: Using Guid.NewGuid() to set this value is almost certainly a mistake, you should set
            it to a value that remains consistent between restart of the system.
            </summary>
        </member>
        <member name="T:Raven.Client.Document.FailoverBehavior">
            <summary>
            Options for handling failover scenarios in replication environment
            </summary>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondaries">
            <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
            <remarks>
            This is usually the safest approach, because it means that you can still serve
            read requests when the primary node is down, but don't have to deal with replication
            conflicts if there are writes to the secondary when the primary node is down.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondariesAndWritesToSecondaries">
            <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
            <remarks>
            Choosing this option requires that you'll have some way of propogating changes
            made to the secondary server(s) to the primary node when the primary goes back
            up. 
            A typical strategy to handle this is to make sure that the replication is setup
            in a master/master relationship, so any writes to the secondary server will be 
            replicated to the master server.
            Please note, however, that this means that your code must be prepared to handle
            conflicts in case of different writes to the same document across nodes.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.FailImmediately">
            <summary>
            Immediately fail the request, without attempting any failover. This is true for both 
            reads and writes
            </summary>
            <remarks>
            This is mostly useful when your replication setup is meant to be used for backups / external
            needs, and is not meant to be a failover storage
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.HiLoKeyGenerator">
            <summary>
            Generate hilo numbers against a RavenDB document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.#ctor(Raven.Client.IDocumentStore,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.HiLoKeyGenerator"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="tag">The tag.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="convention">The convention.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.ILoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.MultiLoaderWithInclude`1">
            <summary>
            Fluent implementation for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.#ctor(Raven.Client.Document.DocumentSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator">
            <summary>
            Generate a hilo key for each given type
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.#ctor(Raven.Client.IDocumentStore,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.PromotableRavenClientEnlistment">
            <summary>
            An implementation of <see cref="T:System.Transactions.IPromotableSinglePhaseNotification"/> for RavenDB Client API
            </summary>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.#ctor(Raven.Client.ITransactionalDocumentSession,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.PromotableRavenClientEnlistment"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Promote">
            <summary>
            Notifies an enlisted object that an escalation of the delegated transaction has been requested.
            </summary>
            <returns>
            A transmitter/receiver propagation token that marshals a distributed transaction. For more information, see <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])"/>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Initialize">
            <summary>
            Notifies a transaction participant that enlistment has completed successfully.
            </summary>
            <exception cref="T:System.Transactions.TransactionException">An attempt to enlist or serialize a transaction.</exception>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Notifies an enlisted object that the transaction is being committed.
            </summary>
            <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment"/> interface used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Notifies an enlisted object that the transaction is being rolled back.
            </summary>
            <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.GetLocalOrDistributedTransactionId(System.Transactions.TransactionInformation)">
            <summary>
            Gets the local or distributed transaction id.
            </summary>
            <param name="transactionInformation">The transaction information.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.RavenClientEnlistment">
            <summary>
            An implementation of <see cref="T:System.Transactions.IEnlistmentNotification"/> for the Raven Client API, allowing Raven
            Client API to participate in Distributed Transactions
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.#ctor(Raven.Client.ITransactionalDocumentSession,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.RavenClientEnlistment"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Prepare(System.Transactions.PreparingEnlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being prepared for commitment.
            </summary>
            <param name="preparingEnlistment">A <see cref="T:System.Transactions.PreparingEnlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Commit(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being committed.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being rolled back (aborted).
            </summary>
            <param name="enlistment">A <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.InDoubt(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that the status of a transaction is in doubt.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Rollbacks the specified single phase enlistment.
            </summary>
            <param name="singlePhaseEnlistment">The single phase enlistment.</param>
        </member>
        <member name="T:Raven.Client.Document.ReflectionUtil">
            <summary>
            Helper class for reflection operations
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ReflectionUtil.GetFullNameWithoutVersionInformation(System.Type)">
            <summary>
            Gets the full name without version information.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.ShardedDocumentQuery`1">
            <summary>
            A query that is executed against sharded instances
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.#ctor(System.String,System.Collections.Generic.IList{Raven.Client.IDocumentSession})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.ShardedDocumentQuery`1"/> class.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="shardSessions">The shard sessions.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.#ctor(Raven.Client.IDocumentQuery{`0}[],System.Collections.Generic.IList{Raven.Client.IDocumentSession})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.ShardedDocumentQuery`1"/> class.
            </summary>
            <param name="queries">The queries.</param>
            <param name="shardSessions">The shard sessions.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.GetQueryResult">
            <summary>
            Gets the query result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.ForEachQuery(System.Action{Raven.Client.IDocumentSession,Raven.Client.IDocumentQuery{`0}})">
            <summary>
            Fors the each query.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereEquals(Raven.Client.WhereEqualsParams)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereContains(System.String,System.Object)">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereContains(System.String,System.Object[])">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.AndAlso">
            <summary>
            Add an AND to the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.OrElse">
            <summary>
            Add an OR to the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="lat">The latitude.</param>
            <param name="lng">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.SortByDistance">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            </summary>
            <remarks>
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </remarks>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="timeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
            Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            This function exists solely to forbid in memory where clause on IDocumentQuery, because
            that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.OpenSubclause">
            <summary>
            Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
             Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
             <remarks>
             This is only valid on dynamic indexes queries
             </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.CloseSubclause">
            <summary>
            Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.QueryResult">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="T:Raven.Client.Document.SpatialDocumentQuery`1">
            <summary>
            A spatial query allows to perform spatial filtering on the index
            </summary>
        </member>
        <member name="M:Raven.Client.Document.SpatialDocumentQuery`1.#ctor(Raven.Client.Document.DocumentQuery{`0},System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.SpatialDocumentQuery`1"/> class.
            </summary>
            <param name="documentQuery">The document query.</param>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.SpatialDocumentQuery`1.#ctor(Raven.Client.Document.DocumentQuery{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.SpatialDocumentQuery`1"/> class.
            </summary>
            <param name="documentQuery">The document query.</param>
            <param name="sortByDistance">if set to <c>true</c> the query will be sorted by distance.</param>
        </member>
        <member name="M:Raven.Client.Document.SpatialDocumentQuery`1.GenerateIndexQuery(System.String)">
            <summary>
            Generates the index query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.EntityStored">
            <summary>
            Delegate definition when an entity is stored in the session
            </summary>
        </member>
        <member name="T:Raven.Client.EntityToDocument">
            <summary>
            Delegate definition for converting an entity to a document and metadata
            </summary>
        </member>
        <member name="T:Raven.Client.DocumentToEntity">
            <summary>
            Delegate definition for converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.ConflictException">
            <summary>
            This exception occurs when a (replication) conflict is encountered.
            Usually this required a user to manually resolve the conflict.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.ConflictedVersionIds">
            <summary>
            Gets or sets the conflicted version ids.
            </summary>
            <value>The conflicted version ids.</value>
        </member>
        <member name="T:Raven.Client.Exceptions.NonAuthoritiveInformationException">
            <summary>
            This exception is raised when a non authoritive information is encountered
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritiveInformationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritiveInformationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritiveInformationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritiveInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Exceptions.NonUniqueObjectException">
            <summary>
            This exception is thrown when a separate instance of an entity is added to the session
            when a different entity with the same key already exists within the session.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Exceptions.ReadVetoException">
            <summary>
            This exception is raised whenever a trigger vetoes the read by the session
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Extensions.MultiTenancyExtensions">
            <summary>
             Extension methods to create mutli tenants databases
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExists(Raven.Client.Client.IDatabaseCommands,System.String)">
            <summary>
             Ensures that the database exists, creating it if needed
            </summary>
             <remarks>
             This operation happens _outside_ of any transaction
             </remarks>
        </member>
        <member name="T:Raven.Client.IDocumentConversionListener">
            <summary>
            Hook for users to provide additional logic for converting to / from 
            entities to document/metadata pairs.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentConversionListener.EntityToDocument(System.Object,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Called when converting an entity to a document and metadata
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentConversionListener.DocumentToEntity(System.Object,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Called when converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentDeleteListener">
            <summary>
            Hook for users to provide additional logic on delete operations
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentDeleteListener.BeforeDelete(System.String,System.Object,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Invoked before the delete request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.IDocumentQueryListener">
            <summary>
            Hook for users to modify all queries globally
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryListener.BeforeQueryExecuted(Raven.Client.IDocumentQueryCustomization)">
            <summary>
            Allow to customize a query globally
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentStoreListener">
            <summary>
            Hook for users to provide additional logic on store operations
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStoreListener.BeforeStore(System.String,System.Object,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Invoked before the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.IDocumentStoreListener.AfterStore(System.String,System.Object,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Invoked after the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask">
            <summary>
            Base class for creating indexes
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.IDocumentStore)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.Client.IDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Executes the index creation against the specified document database using the specified conventions
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.Conventions">
            <summary>
            Gets or sets the document store.
            </summary>
            <value>The document store.</value>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`1">
            <summary>
            Base class for creating indexes
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`2">
            <summary>
            Base class for creating indexes
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.Index(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},Raven.Database.Indexing.FieldIndexing)">
            <summary>
            Register a field to be indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.Store(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},Raven.Database.Indexing.FieldStorage)">
            <summary>
            Register a field to be stored
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.Sort(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},Raven.Database.Indexing.SortOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.TransformResults">
            <summary>
            The result translator definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Reduce">
            <summary>
            The reduce definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Map">
            <summary>
            The map definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Stores">
            <summary>
            Index storage options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.SortOptions">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Analyzers">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Indexes">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedence">
            <summary>
            Precedence values for operations
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Primary">
            <summary>
            x.y  f(x)  a[x]  x++  x--  new
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Unary">
            <summary>
            +  -  !  ~  ++x  --x  (T)x
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Multiplicative">
            <summary>
            *  /  %
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Additive">
            <summary>
            +  -
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Shift">
            <summary>
            &lt;&lt; &gt;&gt;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.RelationalAndTypeTesting">
            <summary>
            &lt;  &gt;  &lt;=  &gt;=  is  as
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Equality">
            <summary>
            ==  !=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalAND">
            <summary>
            &amp;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalXOR">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalOR">
            <summary>
            |
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalAND">
            <summary>
            &amp;&amp; (AndAlso in VB)
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalOR">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.NullCoalescing">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Conditional">
            <summary>
            ?:
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Assignment">
            <summary>
            =  *=  /=  %=  +=  -=  &lt;&lt;=  &gt;&gt;=  &amp;=  ^=  |=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ParenthesisNotNeeded">
            <summary>
            pseudo operator for comparisons
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension">
            <summary>
            Methods on the enum
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension.NeedsParenthesisFor(Raven.Client.Indexes.ExpressionOperatorPrecedence,Raven.Client.Indexes.ExpressionOperatorPrecedence)">
            <summary>
            Needs parenthesis for the expression
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IClientSideDatabase">
            <summary>
            DatabaseAccessor for loading documents in the translator
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.String)">
            <summary>
            Loading a document during result transformers
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loading a document during result transformers
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinition`2">
            <summary>
            This class attempts to provide a strongly typed index definition on the client.
            It is here solely as a convenience, and it is _expected_ to fail in some scenarios.
            The recommended way is to define indexes outside your code, using the Web UI.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinition`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Indexes.IndexDefinition`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinition`2.ToIndexDefinition(Raven.Client.Document.DocumentConvention)">
            <summary>
            Toes the index definition.
            </summary>
            <param name="convention">The convention.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Map">
            <summary>
            Gets or sets the map function
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.TransformResults">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Analyzers">
            <summary>
            Get os set the analyzers
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinition`1">
            <summary>
            This class attempts to provide a strongly typed index definition on the client.
            It is here solely as a convenience, and it is _expected_ to fail in some scenarios.
            The recommended way is to define indexes outside your code, using the Web UI.
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionHelper">
            <summary>
            Generate index defintion from linq expressions
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionHelper.PruneToFailureLinqQueryAsStringToWorkableCode(System.Linq.Expressions.LambdaExpression,Raven.Client.Document.DocumentConvention,System.String,System.Boolean)">
            <summary>
            Perform the actual generation
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.RavenCollections">
            <summary>
            Create an index that aggregate all the document collections in the database
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.RavenCollections.CreateIndexDefinition">
            <summary>
            Returns the index definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.RavenCollections.IndexName">
            <summary>
            Returns the index name
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.RavenDocumentsByEntityName">
            <summary>
             Create an index that allows to tag entities by their entity name
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.RavenDocumentsByEntityName.CreateIndexDefinition">
            <summary>
            Creates the Raven/DocumentsByEntityName index
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.RavenDocumentsByEntityName.IndexName">
            <summary>
            Return the actual index name
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.SpatialIndex">
            <summary>
            Accessor for generating spatial queries on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.SpatialIndex.Generate(System.Double,System.Double)">
            <summary>
            Marker method for allowing generating spatial indexes on the client
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.DynamicQueryProviderProcessor`1">
            <summary>
            A specialized query provider processor for querying dynamic types
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1">
            <summary>
            Process a Linq expression to a Lucene query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.queryGenerator">
            <summary>
            The query generator
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.indexName">
            <summary>
            The index name
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.Action{Raven.Client.IDocumentQueryCustomization},System.Action{Raven.Database.Data.QueryResult},System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProviderProcessor`1"/> class.
            </summary>
            <param name="queryGenerator">The document query generator.</param>
            <param name="customizeQuery">The customize query.</param>
            <param name="afterQueryExecuted">Executed after the query run, allow access to the query results</param>
            <param name="indexName">The name of the index the query is executed against.</param>
            <param name="fieldsToFetch">The fields to fetch in this query</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression and generate the lucene query
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets member info for the specified expression and the path to that expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Get the member expression from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.CurrentPath">
            <summary>
            Gets the current path in the case of expressions within collections
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType">
            <summary>
            Different query types 
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Count">
            <summary>
            Get count of items for the query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.First">
            <summary>
            Get only the first item
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.FirstOrDefault">
            <summary>
            Get only the first item (or null)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Single">
            <summary>
            Get only the first item (or throw if there are more than one)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.SingleOrDefault">
            <summary>
            Get only the first item (or throw if there are more than one) or null if empty
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicQueryProviderProcessor`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.Action{Raven.Client.IDocumentQueryCustomization},System.Action{Raven.Database.Data.QueryResult},System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Creates a dynamic query provider around the provided session
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicQueryProviderProcessor`1.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets member info for the specified expression and the path to that expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Linq.DynamicRavenQueryInspector`1">
            <summary>
            A specialized queryable object for querying dynamic indexes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryInspector`1">
            <summary>
            Implements <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryable`1">
            <summary>
            An implementation of <see cref="T:System.Linq.IOrderedQueryable`1"/> with Raven specific operation
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.#ctor(Raven.Client.Linq.IRavenQueryProvider,Raven.Client.Linq.RavenQueryStatistics,System.String,System.Linq.Expressions.Expression,Raven.Client.Client.IDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryInspector`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetLastEqualityTerm">
            <summary>
             Get the last equality term for the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.FieldsToFetch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.DatabaseCommands">
            <summary>
            Grant access to the database commands
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryInspector`1.#ctor(Raven.Client.Linq.IRavenQueryProvider,Raven.Client.Linq.RavenQueryStatistics,System.String,System.Linq.Expressions.Expression,Raven.Client.Client.IDatabaseCommands)">
            <summary>
            Creates a dynamic raven queryable around the provided query provider
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.DynamicRavenQueryProvider`1">
            <summary>
            This is a specialized query provider for querying dynamic indexes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryProvider">
            <summary>
            Extension for the built-in <see cref="T:System.Linq.IQueryProvider"/> allowing for Raven specific operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.AfterQueryExecuted(System.Action{Raven.Database.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the Linq query to a Lucene query
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.String,Raven.Client.Linq.RavenQueryStatistics,Raven.Client.Client.IDatabaseCommands)">
            <summary>
            Creates a dynamic query provider around the provided document session
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.AfterQueryExecuted(System.Action{Raven.Database.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DynamicRavenQueryProvider`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.IndexName">
            <summary>
            Gets the IndexName for this dynamic query provider
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.CustomizedQuery">
            <summary>
            Gets the actions for customizing the generated lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.DynamicRavenQueryProvider`1.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.ExpressionInfo">
            <summary>
            This class represents a node in an expression, usually a member - but in the case of dynamic queries the path to a member
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.ExpressionInfo.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates an ExpressionMemberInfo
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Path">
            <summary>
            Gets the full path of the member being referred to by this node
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Type">
            <summary>
            Gets the actual type being referred to
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.IsNestedPath">
            <summary>
            Whatever the expression is of a nested path
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.LinqExtensions">
            <summary>
             Extensions to the linq syntax
            </summary>
            <summary>
             Extensions to the linq syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.As``1(System.Linq.IQueryable)">
            <summary>
            Project using a different type
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.AsProjection``1(System.Linq.IQueryable)">
            <summary>
            Project using a different type
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Suggest(System.Linq.IQueryable)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Suggest(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.WhereEntityIs``1(System.Collections.Generic.IEnumerable{System.Object},System.String[])">
            <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Hierarchy``1(``0,System.String)">
            <summary>
            Marker method for allowing hierarchical queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Hierarchy``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Marker method for allowing hierarchical queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Include``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
             implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.In``1(``0,``0[])">
            <summary>
             implementation of In operator
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProvider`1">
            <summary>
            An implementation of <see cref="T:Raven.Client.Linq.IRavenQueryProvider"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.String,Raven.Client.Linq.RavenQueryStatistics,Raven.Client.Client.IDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProvider`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.AfterQueryExecuted(System.Action{Raven.Database.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.CustomizedQuery">
            <summary>
            Gets the actions for customizing the generated lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryStatistics">
            <summary>
            Statistics about a raven query.
            Such as how many records match the query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IsStale">
            <summary>
            Whatever the query returned potentially stale results
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.TotalResults">
            <summary>
            What was the total count of the results that matched the query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.SkippedResults">
            <summary>
            Gets or sets the skipped results (duplicate documents);
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.Timestamp">
            <summary>
            The time when the query results were unstale.
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardedDocumentSession">
            <summary>
            Implements Unit of Work for accessing a set of sharded RavenDB servers
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.GetDocumentId(System.Object)">
            <summary>
            Gets the document id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.#ctor(Raven.Client.Shard.ShardStrategy.IShardStrategy,Raven.Client.IDocumentSession[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentSession"/> class.
            </summary>
            <param name="shardStrategy">The shard strategy.</param>
            <param name="shardSessions">The shard sessions.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.String[])">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.SaveChanges">
            <summary>
            Note that while we can assume a transaction for a single shard, cross shard transactions will NOT work.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.LuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.LuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``1">
            <summary>
            Executes a dynamic query against the RavenDB store
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.LuceneQuery``1">
            <summary>
            Executes a dynamic lucene query against the RavenDB store
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Http.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.AllowNonAuthoritiveInformation">
            <summary>
            Gets or sets a value indicating whether non authoritive information is allowed.
            Non authoritive information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritive document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Shard.ShardedDocumentSession.NonAuthoritiveInformationTimeout"/> for the transaction to commit to get an
            authoritive information. If the wait is longer than <see cref="P:Raven.Client.Shard.ShardedDocumentSession.NonAuthoritiveInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritive information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.NonAuthoritiveInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritive information if encountered non authoritive document.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentSession.Stored">
            <summary>
            Occurs when an entity is stored in the session
            </summary>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentSession.OnEntityConverted">
            <summary>
            Occurs when an entity is converted to a document and metadata.
            Changes made to the document / metadata instances passed to this event will be persisted.
            </summary>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentSession.OnDocumentConverted">
            <summary>
            Occurs when a document and metadata are converted to an entity
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            This is mostly useful when using sharding.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Shard.ShardedDocumentSession.NumberOfRequests"/> rise above <see cref="P:Raven.Client.Shard.ShardedDocumentSession.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="T:Raven.Client.Shard.ShardedDocumentStore">
            <summary>
            Implements a sharded document store
            Hiding most sharding details behind this and the <see cref="T:Raven.Client.Shard.ShardedDocumentSession"/> gives you the ability to use
            sharding without really thinking about this too much
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.#ctor(Raven.Client.Shard.ShardStrategy.IShardStrategy,Raven.Client.Shard.Shards)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentStore"/> class.
            </summary>
            <param name="shardStrategy">The shard strategy.</param>
            <param name="shards">The shards.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.RegisterListener(Raven.Client.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(System.String,System.Net.ICredentials)">
            <summary>
            Opens the session for a particular database with the specified credentials
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(System.Net.ICredentials)">
            <summary>
            Opens the session with the specified credentials.
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.RegisterListener(Raven.Client.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Client.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentStore.Stored">
            <summary>
            Occurs when an entity is stored inside any session opened from this instance
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="T:Raven.Client.Shard.Shards">
            <summary>
            Holds a list of shards
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.Shards.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.Shards"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.Shards.#ctor(System.Collections.Generic.IEnumerable{Raven.Client.IDocumentStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.Shards"/> class.
            </summary>
            <param name="shards">The shards.</param>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.IShardStrategy">
            <summary>
            The shard strategy define how we access, select and resolve specific shards
            inside the <see cref="T:Raven.Client.Shard.ShardedDocumentStore"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.IShardStrategy.ShardSelectionStrategy">
            <summary>
            Gets the shard selection strategy.
            </summary>
            <value>The shard selection strategy.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.IShardStrategy.ShardResolutionStrategy">
            <summary>
            Gets the shard resolution strategy.
            </summary>
            <value>The shard resolution strategy.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.IShardStrategy.ShardAccessStrategy">
            <summary>
            Gets the shard access strategy.
            </summary>
            <value>The shard access strategy.</value>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardAccess.IShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardAccess.IShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.IDocumentSession},System.Func{Raven.Client.IDocumentSession,System.Collections.Generic.IList{``0}})">
            <summary>
            Applies the specified action to all shard sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="shardSessions">The shard sessions.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardAccess.SequentialShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session in sequence
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardAccess.SequentialShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.IDocumentSession},System.Func{Raven.Client.IDocumentSession,System.Collections.Generic.IList{``0}})">
            <summary>
            Applies the specified action for all shard sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="shardSessions">The shard sessions.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.AllShardsResolutionStrategy">
            <summary>
            Shard resolution strategy that select all the shards
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.IShardResolutionStrategy">
            <summary>
            Implementors of this interface provide a way to decide which shards will be queried
            for a specified operation
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.IShardResolutionStrategy.SelectShardIds(Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData)">
            <summary>
            Selects the shard ids appropriate for the specified data
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.AllShardsResolutionStrategy.SelectShardIds(Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData)">
            <summary>
            Selects the shard ids appropriate for the given data
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData">
            <summary>
            Information required to resolve the appropriate shard for an entity / entity and key
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.BuildFrom(System.Type)">
            <summary>
            Builds an instance of <see cref="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData"/> from the given type
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.BuildFrom(System.Type,System.String)">
            <summary>
            Builds an instance of <see cref="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData"/> from the given type
            and key
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy">
            <summary>
            Implementors of this interface provide a way to go from an exists/new
            entity to the appropriate shard for the entity
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy.ShardIdForNewObject(System.Object)">
            <summary>
            Find the shard id for a new object.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy.ShardIdForExistingObject(System.Object)">
            <summary>
            Find the shard id for existing object.
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardStrategy">
            <summary>
            Default shard strategy for the sharding document store
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardStrategy.ShardSelectionStrategy">
            <summary>
            Gets or sets the shard selection strategy.
            </summary>
            <value>The shard selection strategy.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardStrategy.ShardResolutionStrategy">
            <summary>
            Gets or sets the shard resolution strategy.
            </summary>
            <value>The shard resolution strategy.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardStrategy.ShardAccessStrategy">
            <summary>
            Gets or sets the shard access strategy.
            </summary>
            <value>The shard access strategy.</value>
        </member>
        <member name="T:Raven.Client.StoredEntityEventArgs">
            <summary>
            The event arguments raised when an entity is stored
            </summary>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.SessionIdentifier">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>The session identifier.</value>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.EntityInstance">
            <summary>
            Gets or sets the entity instance.
            </summary>
            <value>The entity instance.</value>
        </member>
        <member name="T:Raven.Client.Util.Inflector">
            <summary>
            The Inflector class transforms words from one 
            form to another. For example, from singular to plural.
            </summary>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Pluralize(System.String)">
            <summary>
            Return the plural of a word.
            </summary>
            <param name="word">The singular form</param>
            <returns>The plural form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Singularize(System.String)">
            <summary>
            Return the singular of a word.
            </summary>
            <param name="word">The plural form</param>
            <returns>The singular form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Capitalize(System.String)">
            <summary>
            Capitalizes a word.
            </summary>
            <param name="word">The word to be capitalized.</param>
            <returns><paramref name="word"/> capitalized.</returns>
        </member>
        <member name="T:Raven.Client.Util.ObjectReferenceEqualityComparerer`1">
            <summary>
            A generic object comparerer that would only use object's reference, 
            ignoring any <see cref="T:System.IEquatable`1"/> or <see cref="M:System.Object.Equals(System.Object)"/>  overrides.
            </summary>
        </member>
        <member name="F:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.Default">
            <summary>
            The default ObjectReferenceEqualityComparerer instance
            </summary>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type <typeparamref name="T"/> are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.GetHashCode(`0)">
            <summary>
            When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The object for which to get a hash code.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Raven.Client.WhereEqualsParams">
            <summary>
            Parameters for the Where Equals call
            </summary>
        </member>
        <member name="M:Raven.Client.WhereEqualsParams.#ctor">
            <summary>
            Create a new instance 
            </summary>
        </member>
        <member name="P:Raven.Client.WhereEqualsParams.FieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="P:Raven.Client.WhereEqualsParams.Value">
            <summary>
            The field value
            </summary>
        </member>
        <member name="P:Raven.Client.WhereEqualsParams.IsAnalyzed">
            <summary>
            Should the field be analyzed
            </summary>
        </member>
        <member name="P:Raven.Client.WhereEqualsParams.AllowWildcards">
            <summary>
            Should the field allow wildcards
            </summary>
        </member>
        <member name="P:Raven.Client.WhereEqualsParams.IsNestedPath">
            <summary>
            Is this a root property or not?
            </summary>
        </member>
    </members>
</doc>
