<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Client.Embedded</name>
    </assembly>
    <members>
        <member name="T:Raven.Client.Client.EmbeddableDocumentStore">
            <summary>
            Manages access to RavenDB and open sessions to work with RavenDB.
            Also supports hosting RavenDB in an embedded mode
            </summary>
        </member>
        <member name="M:Raven.Client.Client.EmbeddableDocumentStore.ProcessConnectionStringOption(System.Net.NetworkCredential,System.String,System.String)">
            <summary>
            Parse the connection string option
            </summary>
        </member>
        <member name="M:Raven.Client.Client.EmbeddableDocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Client.EmbeddableDocumentStore.InitializeInternal">
            <summary>
            Initialize the document store access method to RavenDB
            </summary>
        </member>
        <member name="E:Raven.Client.Client.EmbeddableDocumentStore.Disposed">
            <summary>
            Raised after this instance has been disposed
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbeddableDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Client.EmbeddableDocumentStore.Configuration">
            <summary>
             Get or set the configuration instance for embedded RavenDB
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbeddableDocumentStore.RunInMemory">
            <summary>
            Run RavenDB in an embedded mode, using in memory only storage.
            This is useful for unit tests, since it is very fast.
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbeddableDocumentStore.DataDirectory">
            <summary>
            Run RavenDB in embedded mode, using the specified directory for data storage
            </summary>
            <value>The data directory.</value>
        </member>
        <member name="P:Raven.Client.Client.EmbeddableDocumentStore.DocumentDatabase">
            <summary>
             Access the embedded instance of RavenDB
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbeddableDocumentStore.UseEmbeddedHttpServer">
            <summary>
             Whatever we should also host an HTTP endpoint for the document database
            </summary>
        </member>
        <member name="T:Raven.Client.Client.EmbededDatabaseCommands">
            <summary>
             Expose the set of operations by the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.#ctor(Raven.Database.DocumentDatabase,Raven.Client.Document.DocumentConvention)">
            <summary>
             Create a new instance
            </summary>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.StartsWith(System.String,System.Int32,System.Int32)">
            <summary>
            Gets documents for the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Get(System.String)">
            <summary>
            Gets the document for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Put(System.String,System.Nullable{System.Guid},Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Delete(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the document with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.PutAttachment(System.String,System.Nullable{System.Guid},System.Byte[],Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.GetAttachment(System.String)">
            <summary>
            Gets the attachment by the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.DeleteAttachment(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.GetIndexNames(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.ResetIndex(System.String)">
            <summary>
            Resets the specified index
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.GetIndex(System.String)">
            <summary>
            Gets the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition)">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The index def.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1})">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1},System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Query(System.String,Raven.Database.Data.IndexQuery,System.String[])">
            <summary>
            Queries the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The includes are ignored for this implementation.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.DeleteIndex(System.String)">
            <summary>
            Deletes the index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Get(System.String[],System.String[])">
            <summary>
            Gets the results for the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Batch(System.Collections.Generic.IEnumerable{Raven.Database.Data.ICommandData})">
            <summary>
            Executed the specified commands as a single batch
            </summary>
            <param name="commandDatas">The command data.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information.
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Client.IDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.DeleteByIndex(System.String,Raven.Database.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.UpdateByIndex(System.String,Raven.Database.Data.IndexQuery,Raven.Database.Json.PatchRequest[],System.Boolean)">
            <summary>
            Perform a set based update using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Client.IDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.GetRootDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Client.IDatabaseCommands"/> that will interact
            with the root database. Useful if the database has works against a tenant database.
            </summary>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.Suggest(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.GetTerms(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index 
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.EmbededDatabaseCommands.SpinBackgroundWorkers">
            <summary>
            Spin the background worker for indexing
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbededDatabaseCommands.Statistics">
            <summary>
            Access the database statistics
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbededDatabaseCommands.TransactionalStorage">
            <summary>
            Provide direct access to the database transactional storage
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbededDatabaseCommands.IndexDefinitionStorage">
            <summary>
            Provide direct access to the database index definition storage
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbededDatabaseCommands.IndexStorage">
            <summary>
            Provide direct access to the database index storage
            </summary>
        </member>
        <member name="P:Raven.Client.Client.EmbededDatabaseCommands.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Client.EmbededDatabaseCommands.SupportsPromotableTransactions">
            <summary>
            It seems that we can't promote a transaction inside the same process
            </summary>
        </member>
    </members>
</doc>
