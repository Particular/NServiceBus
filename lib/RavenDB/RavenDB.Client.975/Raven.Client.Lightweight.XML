<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Client.Lightweight</name>
    </assembly>
    <members>
        <member name="T:Raven.Client.Connection.Async.AsyncServerClient">
            <summary>
            Access the database commands in async fashion
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands">
            <summary>
            An async database command operations
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.IHoldProfilingInformation">
            <summary>
            Interface for getting profiling information about the actions of the system
            within a given context, usually the context is database commands or async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.IHoldProfilingInformation.ProfilingInformation">
            <summary>
            The profiling information
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String)">
            <summary>
            Begins an async get operation
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String[],System.String[])">
            <summary>
            Begins an async multi get operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsAsync(System.Int32,System.Int32)">
            <summary>
            Begins an async get operation for documents
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsStartingWithAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Begins an async get operation for documents whose id starts with the specified prefix
            </summary>
            <param name="prefix">Prefix that the ids begin with.</param>
            <param name="start">Paging start.</param>
            <param name="pageSize">Size of the page.</param>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
            <summary>
            Begins the async query.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The include paths</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.BatchAsync(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Begins the async batch operation
            </summary>
            <param name="commandDatas">The command data.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexNamesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the indexes from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ResetIndexAsync(System.String)">
            <summary>
            Resets the specified index asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexAsync(System.String)">
            <summary>
            Gets the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">Should overwrite index</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteIndexAsync(System.String)">
            <summary>
            Deletes the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteByIndexAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> allow the operation while the index is stale.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteDocumentAsync(System.String)">
            <summary>
            Deletes the document for the specified id asynchronously
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAsync(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForDefaultDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the default database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetStatisticsAsync">
            <summary>
            Retrieve the statistics for the database asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDatabaseNamesAsync(System.Int32)">
            <summary>
            Gets the list of databases from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAttachmentAsync(System.String,System.Nullable{System.Guid},System.Byte[],Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAttachmentAsync(System.String)">
            <summary>
            Gets the attachment by the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteAttachmentAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTermsAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index asynchronously
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.EnsureSilverlightStartUpAsync">
            <summary>
            Ensures that the silverlight startup tasks have run
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.MultiGetAsync(Raven.Abstractions.Data.GetRequest[])">
            <summary>
            Perform a single POST request containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
            <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.Net.ICredentials,Raven.Client.Connection.HttpJsonRequestFactory,System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Connection.Async.AsyncServerClient"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexNamesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the indexes from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ResetIndexAsync(System.String)">
            <summary>
            Resets the specified index asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexAsync(System.String)">
            <summary>
            Gets the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">Should overwrite index</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteIndexAsync(System.String)">
            <summary>
            Deletes the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteDocumentAsync(System.String)">
            <summary>
            Deletes the document for the specified id asynchronously
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutAsync(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ForDefaultDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> that will interact
            with the root database. Useful if the database has works against a tenant database.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAsync(System.String)">
            <summary>
            Begins an async get operation
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAsync(System.String[],System.String[])">
            <summary>
            Begins an async multi get operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetDocumentsAsync(System.Int32,System.Int32)">
            <summary>
            Begins an async get operation for documents
            </summary>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
            <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.MultiGetAsync(Raven.Abstractions.Data.GetRequest[])">
            <summary>
            Perform a single POST requst containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetDocumentsStartingWithAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Begins an async get operation for documents whose id starts with the specified prefix
            </summary>
            <param name="prefix">Prefix that the ids begin with.</param>
            <param name="start">Paging start.</param>
            <param name="pageSize">Size of the page.</param>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
            <summary>
            Begins the async query.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The include paths</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.BatchAsync(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Begins the async batch operation
            </summary>
            <param name="commandDatas">The command data.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetStatisticsAsync">
            <summary>
            Begins retrieving the statistics for the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetDatabaseNamesAsync(System.Int32)">
            <summary>
            Gets the list of databases from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutAttachmentAsync(System.String,System.Nullable{System.Guid},System.Byte[],Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAttachmentAsync(System.String)">
            <summary>
            Gets the attachment by the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteAttachmentAsync(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.EnsureSilverlightStartUpAsync">
            <summary>
            Ensures that the silverlight startup tasks have run
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetTermsAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index asynchronously
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Connection.Async.AsyncServerClient.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Connection.Async.AsyncServerClient.ProfilingInformation">
            <summary>
            The profiling information
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.CreateHttpJsonRequestParams.AddOperationHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="M:Raven.Client.Connection.CreateHttpJsonRequestParams.AddOperationHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="T:Raven.Client.Connection.HttpJsonRequest">
            <summary>
            A representation of an HTTP json request to the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequest.ReadResponseStringAsync">
            <summary>
            Begins the read response string.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequest.ReadResponseString">
            <summary>
            Reads the response string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequest.CalculateDuration">
            <summary>
            The request duration
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequest.Write(System.String)">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequest.BeginWrite(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the write operation
            </summary>
            <param name="dataToWrite">The byte array.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequest.EndWrite(System.IAsyncResult)">
            <summary>
            Ends the write operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequest.ResponseHeaders">
            <summary>
            Gets or sets the response headers.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequest.ResponseStatusCode">
            <summary>
            Gets or sets the response status code.
            </summary>
            <value>The response status code.</value>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequest.SkipServerCheck">
            <summary>
             Whatever we can skip the server check and directly return the cached result
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequest.ContentType">
            <summary>
            The underlying request content type
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.HttpJsonRequestFactory">
            <summary>
             Create the HTTP Json Requests to the RavenDB Server
             and manages the http cache
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.InvokeLogRequest(Raven.Client.Connection.Profiling.IHoldProfilingInformation,Raven.Client.Connection.Profiling.RequestResultArgs)">
            <summary>
            Invoke the LogRequest event
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.CreateHttpJsonRequest(Raven.Client.Connection.CreateHttpJsonRequestParams)">
            <summary>
            Creates the HTTP json request.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.ResetCache">
            <summary>
            Reset the number of cached requests and clear the entire cache
            Mostly used for testing
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.#ctor(System.Int32)">
            <summary>
            default ctor
            </summary>
            <param name="maxNumberOfCachedRequests"></param>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.EnableBasicAuthenticationOverUnsecureHttpEvenThoughPasswordsWouldBeSentOverTheWireInClearTextToBeStolenByHackers">
            <summary>
            Advanced: Don't set this unless you know what you are doing!
            
            Enable using basic authentication using http
            By default, RavenDB only allows basic authentication over HTTPS, setting this property to true
            will instruct RavenDB to make unsecure calls (usually only good for testing / internal networks).
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.HttpJsonRequestFactory.ConfigureRequest">
            <summary>
            Occurs when a json request is created
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.HttpJsonRequestFactory.LogRequest">
            <summary>
            Occurs when a json request is completed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.NumberOfCachedRequests">
            <summary>
            The number of requests that we got 304 for 
            and were able to handle purely from the cache
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.DisableRequestCompression">
            <summary>
            Determine whether to use compression or not 
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.AggressiveCacheDuration">
            <summary>
             The aggressive cache duration
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.DisableHttpCaching">
            <summary>
            Disable the HTTP caching
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.IDatabaseCommands">
            <summary>
             Expose the set of operations by the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.StartsWith(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves documents for the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Get(System.String)">
            <summary>
            Retrieves the document for the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Get(System.String[],System.String[])">
            <summary>
            Retrieves documents with the specified ids, optionally specifying includes to fetch along
            </summary>
            <param name="ids">The ids.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Put(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the document in the database with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Delete(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the document with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutAttachment(System.String,System.Nullable{System.Guid},System.IO.Stream,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts a byte array as attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetAttachment(System.String)">
            <summary>
            Retrieves the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.HeadAttachment(System.String)">
            <summary>
            Retrieves the attachment metadata with the specified key, not the actual attachmet
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteAttachment(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetDatabaseNames(System.Int32)">
            <summary>
            Returns the names of all tenant databases on the RavenDB server
            </summary>
            <returns>List of tenant database names</returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetIndexNames(System.Int32,System.Int32)">
            <summary>
            Returns the names of all indexes that exist on the server
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.ResetIndex(System.String)">
            <summary>
            Resets the specified index
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetIndex(System.String)">
            <summary>
            Gets the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition)">
            <summary>
            Creates an index with the specified name, based on an index definition
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Creates an index with the specified name, based on an index definition
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1})">
            <summary>
            Creates an index with the specified name, based on an index definition that is created by the supplied
            IndexDefinitionBuilder
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1},System.Boolean)">
            <summary>
            Creates an index with the specified name, based on an index definition that is created by the supplied
            IndexDefinitionBuilder
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Query(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
            <summary>
            Queries the specified index in the Raven flavoured Lucene query syntax
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The includes.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteIndex(System.String)">
            <summary>
            Deletes the specified index
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Batch(System.Collections.Generic.IEnumerable{Raven.Abstractions.Commands.ICommandData})">
            <summary>
            Executed the specified commands as a single batch
            </summary>
            <param name="commandDatas">The command data.</param> 
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Commit(System.Guid)">
            <summary>
            Commits the specified tx id
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery)">
            <summary>
            Perform a set based deletes using the specified index, not allowing the operation
            if the index is stale
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[])">
            <summary>
            Perform a set based update using the specified index, not allowing the operation
            if the index is stale
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[],System.Boolean)">
            <summary>
            Perform a set based update using the specified index
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.ForDefaultDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> that will interacts
            with the default database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Suggest(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetTerms(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the all terms stored in the index for the specified field
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetFacets(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
            <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.PatchRequest[])">
            <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.PatchRequest[],System.Nullable{System.Guid})">
            <summary>
            Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.MultiGet(Raven.Abstractions.Data.GetRequest[])">
            <summary>
            Perform a single POST request containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetStatistics">
            <summary>
            Retrieve the statistics for the database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Head(System.String)">
            <summary>
            Retrieves the document metadata for the specified document key.
            </summary>
            <param name="key">The key.</param>
            <returns>The document metadata for the specified document, or null if the document does not exist</returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.UrlFor(System.String)">
            <summary>
            Get the full URL for the given document key
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.ForceReadFromMaster">
            <summary>
            Force the database commands to read directly from the master, unless there has been a failover.
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IDatabaseCommands.OperationsHeaders">
            <summary>
            Gets or sets the operations headers
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Connection.IDatabaseCommands.SupportsPromotableTransactions">
            <summary>
            Gets a value indicating whether [supports promotable transactions].
            </summary>
            <value>
            	<c>true</c> if [supports promotable transactions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Connection.IRavenQueryInspector">
            <summary>
            Provide access to the underlying <see cref="T:Raven.Client.IDocumentQuery`1"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetLastEqualityTerm">
            <summary>
            The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.DatabaseCommands">
            <summary>
            Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.AsyncDatabaseCommands">
            <summary>
            Grant access to the async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.Session">
            <summary>
            The query session
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.JsonExtensions">
            <summary>
            Extension to json objects
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.JsonExtensions.Deserialize``1(Raven.Json.Linq.RavenJObject,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <typeparam name="T"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.JsonExtensions.Deserialize(Raven.Json.Linq.RavenJObject,System.Type,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <param name="type"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.JsonLuceneDateTimeConverter">
            <summary>
            Convert a lucene data format to and from json values
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.ProfilingContext">
            <summary>
            Manages all profiling activities for a given item
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.RecordAction(System.Object,Raven.Client.Connection.Profiling.RequestResultArgs)">
            <summary>
            Register the action as associated with the sender
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.TryGet(System.Guid)">
            <summary>
            Try to get a session matching the specified id.
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.RequestStatus">
            <summary>
            The status of the request
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.SentToServer">
            <summary>
            The request was sent to the server
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.Cached">
            <summary>
            The request was served directly from the local cache
            after checking with the server to see if it was still 
            up to date
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.AggresivelyCached">
            <summary>
            The request was served from the local cache without
            checking with the server and may be out of date
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.ErrorOnServer">
            <summary>
            The server returned an error
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.RequestResultArgs">
            <summary>
            The result of a request made to the server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.RequestResultArgs.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Raven.Client.Connection.Profiling.RequestResultArgs"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.AdditionalInformation">
            <summary>
            Any additional information that might be required
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.At">
            <summary>
            When the request completed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Status">
            <summary>
            The request status
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Url">
            <summary>
            The request Url
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.DurationMilliseconds">
            <summary>
            How long this request took
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Method">
            <summary>
            The request method
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.PostedData">
            <summary>
            The data posted to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.HttpResult">
            <summary>
            The HTTP result for this request
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Result">
            <summary>
            The result of this request
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.ProfilingInformation">
            <summary>
            Information about a particular session
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.CreateProfilingInformation(System.Nullable{System.Guid})">
            <summary>
             Create a new instance of profiling information and provide additional context information
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Requests">
            <summary>
             The requests made by this session
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Id">
            <summary>
            Uniquely identify the session
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.At">
            <summary>
            The time when the session was created
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.DurationMilliseconds">
            <summary>
            The duration this session was opened
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.#ctor(System.Nullable{System.Guid})">
            <summary>
             Create a new instance of this class
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.Profiling.ProfilingInformation.OnContextCreated">
            <summary>
             A hook that allows extensions to provide additional information about the created context
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.ProfilingInformation.Context">
            <summary>
            Additional information that is added by extension
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.RavenQuery">
            <summary>
            Helper class that provide a way to escape query terms
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.RavenQuery.Escape(System.String)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.RavenQuery.Escape(System.String,System.Boolean,System.Boolean)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
            <returns>escaped term</returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Escaping%20Special%20Characters
            </remarks>
        </member>
        <member name="T:Raven.Client.Connection.RavenTransactionAccessor">
            <summary>
            Provide access to the current transaction 
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.RavenTransactionAccessor.StartTransaction">
            <summary>
            Starts a transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.RavenTransactionAccessor.StartTransaction(System.TimeSpan)">
            <summary>
            Starts a transaction with the specified timeout
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.RavenTransactionAccessor.GetTransactionInformation">
            <summary>
            Gets the transaction information for the current transaction
            </summary>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Connection.ReplicationInformer">
            <summary>
            Replication and failover management on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.#ctor(Raven.Client.Document.DocumentConvention)">
            <summary>
             Create a new instance of this class
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.UpdateReplicationInformationIfNeeded(Raven.Client.Connection.ServerClient)">
            <summary>
            Updates the replication information if needed.
            </summary>
            <param name="serverClient">The server client.</param>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.GetFailureCount(System.String)">
            <summary>
            Get the current failure count for the url
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.ShouldExecuteUsing(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Should execute the operation using the specified operation URL
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.IsFirstFailure(System.String)">
            <summary>
            Determines whether this is the first failure on the specified operation URL.
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.IncrementFailureCount(System.String)">
            <summary>
            Increments the failure count for the specified operation URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.RefreshReplicationInformation(Raven.Client.Connection.ServerClient)">
            <summary>
            Refreshes the replication information.
            Expert use only.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.ResetFailureCount(System.String)">
            <summary>
            Resets the failure count for the specified URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="E:Raven.Client.Connection.ReplicationInformer.FailoverStatusChanged">
            <summary>
            Notify when the failover status changed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.ReplicationInformer.ReplicationDestinations">
            <summary>
            Gets the replication destinations.
            </summary>
            <value>The replication destinations.</value>
        </member>
        <member name="T:Raven.Client.Connection.FailoverStatusChangedEventArgs">
            <summary>
            The event arguments for when the failover status changed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.FailoverStatusChangedEventArgs.Failing">
            <summary>
            Whatever that url is now failing
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.FailoverStatusChangedEventArgs.Url">
            <summary>
            The url whose failover status changed
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.SerializationHelper">
            <summary>
             Helper method to do serialization from RavenJObject to JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.RavenJObjectsToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocument(Raven.Json.Linq.RavenJObject)">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToQueryResult(Raven.Json.Linq.RavenJObject,System.String)">
            <summary>
            Translate a result for a query
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocument(System.String,Raven.Json.Linq.RavenJToken,System.Collections.Specialized.NameValueCollection,System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocumentMetadata(System.String,System.Collections.Specialized.NameValueCollection,System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.ServerClient">
            <summary>
            Access the RavenDB operations using HTTP
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.Net.ICredentials,System.Func{System.String,Raven.Client.Connection.ReplicationInformer},System.String,Raven.Client.Connection.HttpJsonRequestFactory,System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Connection.ServerClient"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Get(System.String)">
            <summary>
            Gets the document for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.StartsWith(System.String,System.Int32,System.Int32)">
            <summary>
            Gets documents for the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.ExecuteGetRequest(System.String)">
            <summary>
            Execute a GET request against the provided url
            and return the result as a json object
            </summary>
            <param name="requestUrl">The relative url to the server</param>
            <remarks>
            This method respects the replication semantics against the database.
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.InFailoverMode">
            <summary>
            Allow to query whatever we are in failover mode or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.DirectGet(System.String,System.String)">
            <summary>
            Perform a direct get for a document with the specified key on the specified server URL.
            </summary>
            <param name="serverUrl">The server URL.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Put(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Delete(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the document with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.PutAttachment(System.String,System.Nullable{System.Guid},System.IO.Stream,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.GetAttachment(System.String)">
            <summary>
            Gets the attachment by the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.HeadAttachment(System.String)">
            <summary>
            Retrieves the attachment metadata with the specified key, not the actual attachmet
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.DeleteAttachment(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.GetIndexNames(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.ResetIndex(System.String)">
            <summary>
            Resets the specified index
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.GetIndex(System.String)">
            <summary>
            Gets the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition)">
            <summary>
            Puts the index.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
            <param name="overwrite">if set to <c>true</c> overwrite the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1})">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1},System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Query(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
            <summary>
            Queries the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.DeleteIndex(System.String)">
            <summary>
            Deletes the index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Get(System.String[],System.String[])">
            <summary>
            Gets the results for the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.DirectGet(System.String[],System.String,System.String[])">
            <summary>
            Perform a direct get for loading multiple ids in one request
            </summary>
            <param name="ids">The ids.</param>
            <param name="operationUrl">The operation URL.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Batch(System.Collections.Generic.IEnumerable{Raven.Abstractions.Commands.ICommandData})">
            <summary>
            Executed the specified commands as a single batch
            </summary>
            <param name="commandDatas">The command data.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.ForceReadFromMaster">
            <summary>
            Force the database commands to read directly from the master, unless there has been a failover.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[])">
            <summary>
            Perform a set based update using the specified index, not allowing the operation
            if the index is stale
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery)">
            <summary>
            Perform a set based deletes using the specified index, not allowing the operation
            if the index is stale
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[],System.Boolean)">
            <summary>
            Perform a set based update using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Suggest(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.GetStatistics">
            <summary>
            Retrieve the statistics for the database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.UrlFor(System.String)">
            <summary>
            Get the full URL for the given document key
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Head(System.String)">
            <summary>
            Check if the document exists for the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.DirectHead(System.String,System.String)">
            <summary>
            Do a direct HEAD request against the server for the specified document
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.MultiGet(Raven.Abstractions.Data.GetRequest[])">
            <summary>
            Perform a single POST requst containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.GetTerms(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index 
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.GetFacets(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
            <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
            <param name="index"></param>
            <param name="query"></param>
            <param name="facetSetupDoc"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Patch(System.String,Raven.Abstractions.Data.PatchRequest[])">
            <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Patch(System.String,Raven.Abstractions.Data.PatchRequest[],System.Nullable{System.Guid})">
            <summary>
            Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Client.Connection.ServerClient.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.ServerClient.FailoverStatusChanged">
            <summary>
            Notify when the failover status changed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.ServerClient.ReplicationInformer">
            <summary>
            Allow access to the replication informer used to determine how we replicate requests
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.ServerClient.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Connection.ServerClient.SupportsPromotableTransactions">
            <summary>
            Gets a value indicating whether [supports promotable transactions].
            </summary>
            <value>
            	<c>true</c> if [supports promotable transactions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.Connection.ServerClient.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Raven.Client.Connection.ServerClient.ProfilingInformation">
            <summary>
            The profiling information
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.WebRequestEventArgs">
            <summary>
            Event arguments for the event of creating a <see cref="T:System.Net.WebRequest"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.WebRequestEventArgs.Request">
            <summary>
            Gets or sets the web request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="T:Raven.Client.Converters.GuidConverter">
            <summary>
            Convert strings from / to guids
            </summary>
        </member>
        <member name="T:Raven.Client.Converters.ITypeConverter">
            <summary>
            Interface for performing type conversions.
            We couldn't use the built-in TypeConverter because it is too big an interface for people to build on.
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="tag">The tag prefix to use</param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="allowNull">Whatever null is a valid value</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int32Converter">
            <summary>
            Convert strings from / to int32
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int64Converter">
            <summary>
            Convert strings from / to int64
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.DocumentStoreBase">
            <summary>
            Contains implementation of some IDocumentStore operations shared by DocumentStore implementations
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentStore">
            <summary>
            Interface for managing access to RavenDB and open sessions.
            </summary>
        </member>
        <member name="T:Raven.Client.IDisposalNotification">
            <summary>
            Provide a way for interested party to tell whatever implementers have been disposed
            </summary>
        </member>
        <member name="E:Raven.Client.IDisposalNotification.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.IDisposalNotification.WasDisposed">
            <summary>
            Whatever the instance has been disposed
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cahceDuration">Specify the aggressive cache duration</param>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that has been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession(Raven.Client.Document.OpenSessionOptions)">
            <summary>
            Opens the session with the specified options.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Url">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentQueryListener)">
            <summary>
            Registers the query listener.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentConversionListener)">
            <summary>
            Registers the convertion listener.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.GetProfilingInformationFor(System.Guid)">
            <summary>
             Get the profiling information for the given id
            </summary>
        </member>
        <member name="E:Raven.Client.DocumentStoreBase.AfterDispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.WasDisposed">
            <summary>
            Whatever the instance has been disposed
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.EnlistInDistributedTransactions">
            <summary>
             Whatever or not we will automatically enlist in distributed transactions
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.ResourceManagerId">
            <summary>
            The resource manager id for the document store.
            IMPORTANT: Using Guid.NewGuid() to set this value is almost certainly a mistake, you should set
            it to a value that remains consistent between restart of the system.
            </summary>
        </member>
        <member name="E:Raven.Client.DocumentStoreBase.SessionCreatedInternal">
            <summary>
             Internal notification for integration tools, mainly
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AsyncDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AbstractDocumentQuery`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryCustomization">
            <summary>
            Customize the document query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.TransformResults(System.Func{Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Execute the transfromation function on the results of this query.
            </summary>
        </member>
        <member name="T:Raven.Client.Document.IAbstractDocumentQuery`1">
            <summary>
             Mostly used by the linq provider
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Object)">
            <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Object[])">
            <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Search(System.String,System.String,Raven.Client.Linq.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetLastEqualityTerm">
            <summary>
              The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.negate">
            <summary>
            Whatever to negate the next operation
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theDatabaseCommands">
            <summary>
            The database commands to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theAsyncDatabaseCommands">
            <summary>
            Async database commands to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.indexName">
            <summary>
            The index to query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.projectionFields">
            <summary>
              The list of fields to project directly from the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryListeners">
            <summary>
            The query listeners for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theSession">
            <summary>
            The session for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.cutoff">
            <summary>
              The cutoff date to use for detecting staleness in the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.orderByFields">
            <summary>
              The fields to order the results by
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.sortByHints">
            <summary>
              The types to sort the fields by (NULL if not specified)
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.pageSize">
            <summary>
              The page size to use when querying the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theQueryText">
            <summary>
            The query to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.start">
            <summary>
              which record to start reading from
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.timeout">
            <summary>
            Timeout for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theWaitForNonStaleResults">
            <summary>
            Should we wait for non stale results
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.includes">
            <summary>
            The paths to include when loading the query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.aggregationOp">
            <summary>
            What aggregated operation to execute
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.groupByFields">
            <summary>
            Fields to group on
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryStats">
            <summary>
            Holds the query stats
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
            <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.AbstractDocumentQuery{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.IDocumentQuery`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateQueryWithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Lazily">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetEnumerator">
            <summary>
              Gets the enumerator.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Object)">
            <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Object[])">
            <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Called externally to raise the after query executed callback
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateIndexQuery(System.String)">
            <summary>
              Generates the index query.
            </summary>
            <param name = "query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Search(System.String,System.String,Raven.Client.Linq.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetLastEqualityTerm">
            <summary>
              The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToListAsync">
            <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CountAsync">
            <summary>
            Gets the total count of records for this query
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DatabaseCommands">
            <summary>
              Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.AsyncDatabaseCommands">
            <summary>
              Grant access to the async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.Session">
            <summary>
              Gets the session associated with this document query
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryText">
            <summary>
              Gets the query text built so far
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryResult">
            <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryResultAsync">
            <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentQuery`1">
            <summary>
             Asynchronous query against a raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryBase`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.NegateNext">
            <summary>
              Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Object)">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Object[])">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SortByDistance">
            <summary>
              Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.GroupBy``1(Raven.Abstractions.Data.AggregationOperation,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Intersect">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Called externally to raise the after query executed callback
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.UsingDefaultField(System.String)">
            <summary>
            Select the default field to use for this query
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.Not">
            <summary>
              Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.ToListAsync">
            <summary>
            Gets the query result
            </summary>
            <value>The query result.</value>
        </member>
        <member name="P:Raven.Client.IAsyncDocumentQuery`1.QueryResultAsync">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncDocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.AsyncDocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(Raven.Client.WhereParams)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereContains(System.String,System.Object)">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereContains(System.String,System.Object[])">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#SortByDistance">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
            Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OpenSubclause">
            <summary>
            Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#CloseSubclause">
            <summary>
            Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.GroupBy``1(Raven.Abstractions.Data.AggregationOperation,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Intersect">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
             Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
             <remarks>
             This is only valid on dynamic indexes queries
             </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="T:Raven.Client.Document.Async.AsyncDocumentSession">
            <summary>
            Implementation for async document session 
            </summary>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations">
            <summary>
            Abstract implementation for in memory session operations
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.deletedEntities">
            <summary>
            The entities waiting to be deleted
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesAndMetadata">
            <summary>
            hold the data required to manage the data for RavenDB's Unit of Work
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesByKey">
            <summary>
            Translate between a key and its associated entity
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.listeners">
            <summary>
            all the listeners for this session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.#ctor(Raven.Client.DocumentStoreBase,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.InMemoryDocumentSessionOperations"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetEtagFor``1(``0)">
            <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(Raven.Abstractions.Data.JsonDocument)">
            <summary>
            Tracks the entity inside the unit of work
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documentFound">The document found.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Tracks the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when SaveChanges is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Converts the json document to an entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <param name="documentFound">The document found.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrySetIdentity``1(``0,System.String)">
            <summary>
            Tries to set the identity property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.Guid)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.String)">
            <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.Guid,System.String)">
            <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetOrGenerateDocumentKey(System.Object)">
            <summary>
            Tries to get the identity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TryGetIdFromInstance(System.Object,System.String@)">
            <summary>
            Attempts to get the document key from an instance 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.CreatePutEntityCommand(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Creates the put entity command.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.UpdateBatchResults(System.Collections.Generic.IList{Raven.Abstractions.Data.BatchResult},Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData)">
            <summary>
            Updates the batch results.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PrepareForSaveChanges">
            <summary>
            Prepares for save changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.MarkReadOnly(System.Object)">
            <summary>
            Mark the entity as read only, change tracking won't apply 
            to such an entity. This can be done as an optimization step, so 
            we don't need to check the entity for changes.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntityChanged(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Determines if the entity have changed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntitiesToJsonCachingScope">
            <summary>
            All calls to convert an entity to a json object would be cache
            This is used inside the SaveChanges() action, where we need to access the entities json
            in several disparate places.
            
            Note: This assumes that no modifications can happen during the SaveChanges. This is naturally true
            Note: for SaveChanges (and multi threaded access will cause undefined behavior anyway).
            Note: For SaveChangesAsync, the same holds true as well.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
            <param name="commands">The commands to be executed</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ClearEnlistment">
            <summary>
            Clears the enlistment.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Id">
            <summary>
            The session id 
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentStore">
            <summary>
             The document store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.AllowNonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout"/> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata">
            <summary>
            Metadata held about an entity by the session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ETag">
            <summary>
            Gets or sets the ETag.
            </summary>
            <value>The ETag.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalMetadata">
            <summary>
            Gets or sets the original metadata.
            </summary>
            <value>The original metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ForceConcurrencyCheck">
            <summary>
            A concurrency check will be forced on this entity 
            even if UseOptimisticConcurrency is set to false
            </summary>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData">
            <summary>
            Data for a batch command to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Commands">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Entities">
            <summary>
            Gets or sets the entities.
            </summary>
            <value>The entities.</value>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentSession">
            <summary>
            Interface for document session using async approaches
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object,System.Guid)">
            <summary>
            Stores the specified entity with the specified etag.
            The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object,System.Guid,System.String)">
            <summary>
            Stores the specified entity with the specified etag, under the specified id
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object,System.String)">
            <summary>
            Stores the specified dynamic entity, under the specified id
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The id to store this entity under. If other entity exists with the same id it will be overridden.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync">
            <summary>
            Begins the async save changes operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.IAsyncDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.IAsyncAdvancedSessionOperations">
            <summary>
            Advanced async session operations
            </summary>
        </member>
        <member name="T:Raven.Client.IAdvancedDocumentSessionOperations">
            <summary>
            Advanced session operations
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.MarkReadOnly(System.Object)">
            <summary>
            Mark the entity as read only, change tracking won't apply 
            to such an entity. This can be done as an optimization step, so 
            we don't need to check the entity for changes.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            If the entity is transient, it will load the metadata from the store
            and associate the current state of the entity with the metadata from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetEtagFor``1(``0)">
            <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id for the specified entity.
            </summary>
            <remarks>
            This function may return <c>null</c> if the entity isn't tracked by the session, or if the entity is 
            a new entity with a key that should be generated on the server. 
            </remarks>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
            <param name="commands">The commands to be executed</param>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.DocumentStore">
            <summary>
            The document store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance. 
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.AllowNonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout"/> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.LoadStartingWithAsync``1(System.String,System.Int32,System.Int32)">
            <summary>
            Load documents with the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="P:Raven.Client.IAsyncAdvancedSessionOperations.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="T:Raven.Client.Linq.IDocumentQueryGenerator">
            <summary>
             Generate a new document query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.Query``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.AsyncQuery``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IDocumentQueryGenerator.Conventions">
            <summary>
            Gets the conventions associated with this query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Async.AsyncDocumentSession"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadStartingWithAsync``1(System.String,System.Int32,System.Int32)">
            <summary>
            Load documents with the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsyncInternal``1(System.String[],System.String[])">
            <summary>
            Begins the async multi load operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.SaveChangesAsync">
            <summary>
            Begins the async save changes operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#Query``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncQuery``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1">
            <summary>
            Fluent implementation for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="T:Raven.Client.Document.IAsyncLoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.#ctor(Raven.Client.Document.Async.AsyncDocumentSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents lazily
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.Batches.ILazySessionOperations">
            <summary>
            Specify interface for lazy operation for the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
            <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String,System.Action{``0})">
            <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType,System.Action{``0})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.Batches.IEagerSessionOperations">
            <summary>
            Allow to perform eager operations on the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IEagerSessionOperations.ExecuteAllPendingLazyOperations">
            <summary>
            Execute all the lazy requests pending within this session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.#ctor(Raven.Client.IDocumentSessionImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DefaultRavenContractResolver">
            <summary>
            The default json contract will serialize all properties and all public fields
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DefaultRavenContractResolver"/> class.
            </summary>
            <param name="shareCache">If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="T:Raven.Client.Document.DocumentConvention">
            <summary>
            The set of conventions used by the <see cref="T:Raven.Client.Document.DocumentStore"/> which allow the users to customize
            the way the Raven client API behaves
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentConvention"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultFindFullDocumentKeyFromNonStringIdentifier(System.Object,System.Type,System.Boolean)">
            <summary>
             Find the full document name assuming that we are using the standard conventions
             for generating a document key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKeyUsingIdentity(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key using identity.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultTypeTagName(System.Type)">
            <summary>
            Get the default tag name for the specified type.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetTypeTagName(System.Type)">
            <summary>
            Gets the name of the type tag.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKey(System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetIdentityProperty(System.Type)">
            <summary>
            Gets the identity property.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.CreateSerializer">
            <summary>
            Creates the serializer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrType(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Get the CLR type (if exists) from the document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrTypeName(System.Type)">
            <summary>
             Get the CLR type name to be stored in the entity metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.Clone">
            <summary>
            Clone the current conventions to a new instance
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FailoverBehavior">
            <summary>
            How should we behave in a replicated environment when we can't 
            reach the primary node and need to failover to secondary node(s).
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.CustomizeJsonSerializer">
            <summary>
            Register an action to customize the json serializer used by the <see cref="T:Raven.Client.Document.DocumentStore"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DisableProfiling">
            <summary>
            Disable all profiling support
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityTypeConvertors">
            <summary>
             A list of type converters that can be used to translate the document key (string)
             to whatever type it is that is used on the entity, if the type isn't already a string
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityPartsSeparator">
            <summary>
            Gets or sets the identity parts separator used by the HiLo generators
            </summary>
            <value>The identity parts separator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the default max number of requests per session.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DefaultQueryingConsistency">
            <summary>
            The consistency options used when querying the database by default
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrType">
            <summary>
            Gets or sets the function to find the clr type of a document.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrTypeName">
            <summary>
            Gets or sets the function to find the clr type name from a clr type
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindFullDocumentKeyFromNonStringIdentifier">
            <summary>
            Gets or sets the function to find the full document key based on the type of a document
            and the value type identifier (just the numeric part of the id).
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.JsonContractResolver">
            <summary>
            Gets or sets the json contract resolver.
            </summary>
            <value>The json contract resolver.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindTypeTagName">
            <summary>
            Gets or sets the function to find the type tag.
            </summary>
            <value>The name of the find type tag.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForDynamicIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ShouldCacheRequest">
            <summary>
            Whatever or not RavenDB should cache the request to the specified url.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityProperty">
            <summary>
            Gets or sets the function to find the identity property.
            </summary>
            <value>The find identity property.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityPropertyNameFromEntityName">
            <summary>
            Get or sets the function to get the identity property name from the entity name
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DocumentKeyGenerator">
            <summary>
            Gets or sets the document key generator.
            </summary>
            <value>The document key generator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.UseParallelMultiGet">
            <summary>
            Instruct RavenDB to parallel Multi Get processing 
            when handling lazy requests
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.HandleUnauthorizedResponse">
            <summary>
            Handles unauthenticated responses, usually by authenticating against the oauth server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.HandleUnauthorizedResponseAsync">
            <summary>
            Begins handling of unauthenticated responses, usually by authenticating against the oauth server
            in async manner
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdValuePartForValueTypeConversion">
            <summary>
            When RavenDB needs to convert between a string id to a value type like int or guid, it calls
            this to perform the actual work
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.SaveEnumsAsIntegers">
            <summary>
            Saves Enums as integers and instruct the Linq provider to query enums as integer values.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.TransformTypeTagNameToDocumentKeyPrefix">
            <summary>
            Translate the type tag name to the document key prefix
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.EnlistInDistributedTransactions">
            <summary>
             Whatever or not RavenDB will automatically enlist in distributed transactions
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ApplyReduceFunction">
            <summary>
            This is called in order to ensure that reduce function in a sharded environment is run 
            over the merged results
            </summary>
        </member>
        <member name="T:Raven.Client.Document.ConsistencyOptions">
            <summary>
            The consistency options for all queries, fore more details about the consistency options, see:
            http://www.allthingsdistributed.com/2008/12/eventually_consistent.html
            
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.MonotonicRead">
            <summary>
            Ensures that after querying an index at time T, you will never see the results
            of the index at a time prior to T.
            This is ensured by the server, and require no action from the client
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.QueryYourWrites">
            <summary>
             After updating a documents, will only accept queries which already indexed the updated value.
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Lazily">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed.
            Also provide a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQuery`1.QueryResult">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.DocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
            Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OpenSubclause">
            <summary>
            Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#CloseSubclause">
            <summary>
            Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
             Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
             <remarks>
             This is only valid on dynamic indexes queries
             </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.GroupBy``1(Raven.Abstractions.Data.AggregationOperation,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Intersect">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(Raven.Client.WhereParams)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereContains(System.String,System.Object)">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereContains(System.String,System.Object[])">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.GenerateQueryWithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#SortByDistance">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentSession">
            <summary>
            Implements Unit of Work for accessing the RavenDB server
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentSessionImpl">
            <summary>
            Interface for document session which holds the internal operations
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentSession">
            <summary>
            Interface for document session
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String[])">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object,System.Guid)">
            <summary>
            Stores the specified entity with the specified etag
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object,System.Guid,System.String)">
            <summary>
            Stores the specified entity with the specified etag, under the specified id
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object)">
            <summary>
            Stores the specified dynamic entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object,System.String)">
            <summary>
            Stores the specified dynamic entity, under the specified id
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The id to store this entity under. If other entity exists with the same id it will be overridden.</param>
        </member>
        <member name="P:Raven.Client.IDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.ITransactionalDocumentSession">
            <summary>
            Implementers of this interface provide transactional operations
            Note that this interface is mostly useful only for expert usage
            </summary>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Commit(System.Guid)">
            <summary>
            Commits the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns>The token representing the distributed transaction</returns>
        </member>
        <member name="P:Raven.Client.ITransactionalDocumentSession.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="T:Raven.Client.ISyncAdvancedSessionOperation">
            <summary>
            Advanced synchronous session operations
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LoadStartingWith``1(System.String,System.Int32,System.Int32)">
            <summary>
            Load documents with the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.Lazily">
            <summary>
            Access the lazy operations
            </summary>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.Eagerly">
            <summary>
            Access the eager operations
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.Document.DocumentSessionListeners,System.Guid,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentSession"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
            <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String,System.Action{``0})">
            <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.ValueType,System.Action{``0})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String[])">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns>The token representing the distributed transaction</returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``1">
            <summary>
            Query RavenDB dynamically using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#Query``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#AsyncQuery``1(System.String)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LazyLoadInternal``1(System.String[],System.String[],System.Action{``0[]})">
            <summary>
            Register to lazily load documents and include
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.Lazily">
            <summary>
            Access the lazy operations
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.Eagerly">
            <summary>
            Access the eager operations
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DocumentStore">
            <summary>
            Manages access to RavenDB and open sessions to work with RavenDB.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentStore.currentSessionId">
            <summary>
            The current session id - only used during construction
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentStore.databaseCommandsGenerator">
            <summary>
            Generate new instance of database commands
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentStore"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.ParseConnectionString(System.String)">
            <summary>
            Set document store settings based on a given connection string.
            </summary>
            <param name="connString">The connection string to parse</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.SetConnectionStringSettings(Raven.Abstractions.Data.RavenConnectionStringOptions)">
            <summary>
            Copy the relevant connection string settings
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.GetConnectionStringOptions">
            <summary>
            Create the connection string parser
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.AssertValidConfiguration">
            <summary>
            validate the configuration for the document store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.InitializeInternal">
            <summary>
            Initialize the document store access method to RavenDB
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that have been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cacheDuration">Specify the aggressive cache duration</param>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.JsonRequestFactory">
            <summary>
             Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory"/> for the stores
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ApiKey">
            <summary>
            The API Key to use when authenticating against a RavenDB server that
            supports API Key authentication
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string name.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DefaultDatabase">
            <summary>
            Gets or sets the default database name.
            </summary>
            <value>The default database name.</value>
        </member>
        <member name="E:Raven.Client.Document.DocumentStore.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.MaxNumberOfCachedRequests">
            <summary>
            Max number of cached requests (default: 2048)
            </summary>
        </member>
        <member name="T:Raven.Client.Document.FailoverBehavior">
            <summary>
            Options for handling failover scenarios in replication environment
            </summary>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondaries">
            <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
            <remarks>
            This is usually the safest approach, because it means that you can still serve
            read requests when the primary node is down, but don't have to deal with replication
            conflicts if there are writes to the secondary when the primary node is down.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondariesAndWritesToSecondaries">
            <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
            <remarks>
            Choosing this option requires that you'll have some way of propogating changes
            made to the secondary server(s) to the primary node when the primary goes back
            up. 
            A typical strategy to handle this is to make sure that the replication is setup
            in a master/master relationship, so any writes to the secondary server will be 
            replicated to the master server.
            Please note, however, that this means that your code must be prepared to handle
            conflicts in case of different writes to the same document across nodes.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.FailImmediately">
            <summary>
            Immediately fail the request, without attempting any failover. This is true for both 
            reads and writes. The RavenDB client will not even check that you are using replication.
            </summary>
            <remarks>
            This is mostly useful when your replication setup is meant to be used for backups / external
            needs, and is not meant to be a failover storage.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.ReadFromAllServers">
            <summary>
            Read requests will be spread across all the servers, instead of doing all the work against the master.
            Write requests will always go to the master.
            </summary>
            <remarks>
            This is useful for striping, spreading the read load among multiple servers. The idea is that this will give us better read performance overall.
            A single session will always use the same server, we don't do read striping within a single session.
            Note that using this means that you cannot set UserOptimisticConcurrency to true, because that would generate concurrency exceptions.
            If you want to use that, you have to open the session with ForceReadFromMaster set to true.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.HiLoKeyGenerator">
            <summary>
            Generate hilo numbers against a RavenDB document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.#ctor(Raven.Client.Connection.IDatabaseCommands,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.HiLoKeyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="convention">The convention.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.NextId">
            <summary>
             Create the next id (numeric)
            </summary>
        </member>
        <member name="T:Raven.Client.Document.ILoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DocumentSessionListeners">
            <summary>
            Holder for all the listeners for the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSessionListeners.#ctor">
            <summary>
            Create a new instance of this class
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.ConversionListeners">
            <summary>
            The conversion listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.QueryListeners">
            <summary>
            The query listeners allow to modify queries before it is executed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.StoreListeners">
            <summary>
            The store listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.DeleteListeners">
            <summary>
            The delete listeners
            </summary>
        </member>
        <member name="T:Raven.Client.Document.MultiLoaderWithInclude`1">
            <summary>
            Fluent implementation for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.#ctor(Raven.Client.IDocumentSessionImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator">
            <summary>
            Generate a hilo key for each given type
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.#ctor(Raven.Client.Connection.IDatabaseCommands,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.#ctor(Raven.Client.IDocumentStore,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.PromotableRavenClientEnlistment">
            <summary>
            An implementation of <see cref="T:System.Transactions.IPromotableSinglePhaseNotification"/> for RavenDB Client API
            </summary>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.#ctor(Raven.Client.ITransactionalDocumentSession,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.PromotableRavenClientEnlistment"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Promote">
            <summary>
            Notifies an enlisted object that an escalation of the delegated transaction has been requested.
            </summary>
            <returns>
            A transmitter/receiver propagation token that marshals a distributed transaction. For more information, see <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])"/>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Initialize">
            <summary>
            Notifies a transaction participant that enlistment has completed successfully.
            </summary>
            <exception cref="T:System.Transactions.TransactionException">An attempt to enlist or serialize a transaction.</exception>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Notifies an enlisted object that the transaction is being committed.
            </summary>
            <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment"/> interface used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Notifies an enlisted object that the transaction is being rolled back.
            </summary>
            <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.GetLocalOrDistributedTransactionId(System.Transactions.TransactionInformation)">
            <summary>
            Gets the local or distributed transaction id.
            </summary>
            <param name="transactionInformation">The transaction information.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.RavenClientEnlistment">
            <summary>
            An implementation of <see cref="T:System.Transactions.IEnlistmentNotification"/> for the Raven Client API, allowing Raven
            Client API to participate in Distributed Transactions
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.#ctor(Raven.Client.ITransactionalDocumentSession,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.RavenClientEnlistment"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Prepare(System.Transactions.PreparingEnlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being prepared for commitment.
            </summary>
            <param name="preparingEnlistment">A <see cref="T:System.Transactions.PreparingEnlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Commit(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being committed.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being rolled back (aborted).
            </summary>
            <param name="enlistment">A <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.InDoubt(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that the status of a transaction is in doubt.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Rollbacks the specified single phase enlistment.
            </summary>
            <param name="singlePhaseEnlistment">The single phase enlistment.</param>
        </member>
        <member name="T:Raven.Client.Document.ReflectionUtil">
            <summary>
            Helper class for reflection operations
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ReflectionUtil.GetFullNameWithoutVersionInformation(System.Type)">
            <summary>
            Gets the full name without version information.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.ShardedDocumentQuery`1">
            <summary>
            A query that is executed against sharded instances
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,System.Func{Raven.Client.Shard.ShardRequestData,System.Collections.Generic.IList{System.Tuple{System.String,Raven.Client.Connection.IDatabaseCommands}}},Raven.Client.Shard.ShardStrategy,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.ShardedDocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.DatabaseCommands">
            <summary>
              Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.AsyncDatabaseCommands">
            <summary>
              Grant access to the async database commands
            </summary>
        </member>
        <member name="T:Raven.Client.EntityStored">
            <summary>
            Delegate definition when an entity is stored in the session
            </summary>
        </member>
        <member name="T:Raven.Client.EntityToDocument">
            <summary>
            Delegate definition for converting an entity to a document and metadata
            </summary>
        </member>
        <member name="T:Raven.Client.DocumentToEntity">
            <summary>
            Delegate definition for converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.ConflictException">
            <summary>
            This exception occurs when a (replication) conflict is encountered.
            Usually this required a user to manually resolve the conflict.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.ConflictedVersionIds">
            <summary>
            Gets or sets the conflicted version ids.
            </summary>
            <value>The conflicted version ids.</value>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.Etag">
            <summary>
            Gets or sets the conflicted document etag
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.NonAuthoritativeInformationException">
            <summary>
            This exception is raised when a non authoritative information is encountered
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Exceptions.NonUniqueObjectException">
            <summary>
            This exception is thrown when a separate instance of an entity is added to the session
            when a different entity with the same key already exists within the session.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Exceptions.ReadVetoException">
            <summary>
            This exception is raised whenever a trigger vetoes the read by the session
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Extensions.DatabaseCommandsExtensions">
            <summary>
             Extension methods that make certain database command operations more convenient to use
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.DatabaseCommandsExtensions.PutIndexAsync``1(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Boolean)">
            <summary>
            Asynchronously creates an index
            </summary>
            <typeparam name="T">The type that defines the index to be create.</typeparam>
            <param name="commands">The hook to the database commands.</param>
            <param name="overwrite">Should the index be overwritten if it already exists.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Extensions.MultiDatabase">
            <summary>
             Methods to create mutli tenants databases
            </summary>
        </member>
        <member name="T:Raven.Client.Extensions.MultiTenancyExtensions">
            <summary>
             Extension methods to create mutli tenants databases
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExists(Raven.Client.Connection.IDatabaseCommands,System.String,System.Boolean)">
            <summary>
             Ensures that the database exists, creating it if needed
            </summary>
             <remarks>
             This operation happens _outside_ of any transaction
             </remarks>
        </member>
        <member name="M:Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExistsAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.Boolean)">
            <summary>
             Ensures that the database exists, creating it if needed
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1">
            <summary>
            Abstract class used to provide infrastructure service for actual creation tasks
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask">
            <summary>
            Base class for creating indexes
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object)">
            <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Recurse``2(``0,System.Func{``0,``1})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.MetadataFor(System.Object)">
            <summary>
            Allow to get to the metadata of the document
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.AsDocument(System.Object)">
            <summary>
            Allow to get to the metadata of the document
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.IDocumentStore)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Executes the index creation against the specified document database using the specified conventions
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.ExecuteAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.Conventions">
            <summary>
            Gets or sets the document store.
            </summary>
            <value>The document store.</value>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldIndexing)">
            <summary>
            Register a field to be indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.String,Raven.Abstractions.Indexing.FieldIndexing)">
            <summary>
            Register a field to be indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldStorage)">
            <summary>
            Register a field to be stored
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.String,Raven.Abstractions.Indexing.FieldStorage)">
            <summary>
            Register a field to be stored
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyze(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Register a field to be analyzed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyze(System.String,System.String)">
            <summary>
            Register a field to be analyzed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.SortOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TransformResults">
            <summary>
            The result translator definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Reduce">
            <summary>
            The reduce definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Stores">
            <summary>
            Index storage options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.StoresStrings">
            <summary>
            Index storage options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSortOptions">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyzers">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.AnalyzersStrings">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Indexes">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexesStrings">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1">
            <summary>
            Allow to create indexes with multiple maps
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.AddMapForAll``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable}})">
            <summary>
            Uses reflection to call <see cref="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.AddMap``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable}})"/> for the base type and all available subclasses.
            </summary>
            <remarks>This is taken from Oren's code in this thread https://groups.google.com/d/msg/ravendb/eFUlQG-spzE/Ac0PrvsFyJYJ </remarks>
            <typeparam name="TBase">The base class type whose descendant types are to be included in the index.</typeparam>
            <param name="expr"></param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask">
            <summary>
            Allow to create indexes with multiple maps
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.Indexing.IndexingLinqExtensions">
            <summary>
            Extension methods that adds additional behavior during indexing operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.WhereEntityIs``1(System.Collections.Generic.IEnumerable{System.Object},System.String[])">
            <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.Boost(System.Object,System.Single)">
            <summary>
            Boost the value with the given amount
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.IfEntityIs``1(System.Object,System.String)">
            <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.Hierarchy``1(``0,System.String)">
            <summary>
            Marker method for allowing hierarchical queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.Hierarchy``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Marker method for allowing hierarchical queries on the server.
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentConversionListener">
            <summary>
            Hook for users to provide additional logic for converting to / from 
            entities to document/metadata pairs.
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.EntityToDocument(System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called when converting an entity to a document and metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.DocumentToEntity(System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called when converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentDeleteListener">
            <summary>
            Hook for users to provide additional logic on delete operations
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentDeleteListener.BeforeDelete(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the delete request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentQueryListener">
            <summary>
            Hook for users to modify all queries globally
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentQueryListener.BeforeQueryExecuted(Raven.Client.IDocumentQueryCustomization)">
            <summary>
            Allow to customize a query globally
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentStoreListener">
            <summary>
            Hook for users to provide additional logic on store operations
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentStoreListener.BeforeStore(System.String,System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
            <param name="original">The original document that was loaded from the server</param>
            <returns>
            Whatever the entity instance was modified and requires us re-serialize it.
            Returning true would force re-serialization of the entity, returning false would 
            mean that any changes to the entityInstance would be ignored in the current SaveChanges call.
            </returns>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentStoreListener.AfterStore(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked after the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`1">
            <summary>
            Base class for creating indexes
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`2">
            <summary>
            Base class for creating indexes
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Map">
            <summary>
            The map definition
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedence">
            <summary>
            Precedence values for operations
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Primary">
            <summary>
            x.y  f(x)  a[x]  x++  x--  new
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Unary">
            <summary>
            +  -  !  ~  ++x  --x  (T)x
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Multiplicative">
            <summary>
            *  /  %
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Additive">
            <summary>
            +  -
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Shift">
            <summary>
            &lt;&lt; &gt;&gt;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.RelationalAndTypeTesting">
            <summary>
            &lt;  &gt;  &lt;=  &gt;=  is  as
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Equality">
            <summary>
            ==  !=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalAND">
            <summary>
            &amp;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalXOR">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalOR">
            <summary>
            |
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalAND">
            <summary>
            &amp;&amp; (AndAlso in VB)
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalOR">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.NullCoalescing">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Conditional">
            <summary>
            ?:
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Assignment">
            <summary>
            =  *=  /=  %=  +=  -=  &lt;&lt;=  &gt;&gt;=  &amp;=  ^=  |=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ParenthesisNotNeeded">
            <summary>
            pseudo operator for comparisons
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension">
            <summary>
            Methods on the enum
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension.NeedsParenthesisFor(Raven.Client.Indexes.ExpressionOperatorPrecedence,Raven.Client.Indexes.ExpressionOperatorPrecedence)">
            <summary>
            Needs parenthesis for the expression
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionStringBuilder">
            <summary>
              Based off of System.Linq.Expressions.ExpressionStringBuilder
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ExpressionToString(Raven.Client.Document.DocumentConvention,System.Boolean,System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
              Convert the expression to a string
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.BlockExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.CatchBlock" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.ConditionalExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.DefaultExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
              Visits the element init.
            </summary>
            <param name = "initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
              Visits the children of the extension expression.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.GotoExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.IndexExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.InvocationExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.LabelExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
              Visits the lambda.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.ListInitExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.LoopExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
              Visits the member assignment.
            </summary>
            <param name = "assignment">The assignment.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
              Visits the member list binding.
            </summary>
            <param name = "binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
              Visits the member member binding.
            </summary>
            <param name = "binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.SwitchCase" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.TryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.TypeBinaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="T:Raven.Client.Indexes.IClientSideDatabase">
            <summary>
            DatabaseAccessor for loading documents in the translator
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.String)">
            <summary>
            Loading a document during result transformers
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loading documents during result transformers
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Include(System.String)">
            <summary>
            Will ask RavenDB to include this document in the query results
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Include(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Will ask RavenDB to include these documents in the query results
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexCreation">
            <summary>
            Helper class for creating indexes from implementations of <see cref="T:Raven.Client.Indexes.AbstractIndexCreationTask"/>.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified assembly.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified assembly.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`2">
            <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Indexes.IndexDefinitionBuilder`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.ToIndexDefinition(Raven.Client.Document.DocumentConvention,System.Boolean)">
            <summary>
            Toes the index definition.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Map">
            <summary>
            Gets or sets the map function
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.TransformResults">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.StoresStrings">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.IndexesStrings">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Analyzers">
            <summary>
            Get os set the analyzers
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.AnalyzersStrings">
            <summary>
            Get os set the analyzers
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`1">
            <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionHelper">
            <summary>
            Generate index defintion from linq expressions
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionHelper.PruneToFailureLinqQueryAsStringToWorkableCode``2(System.Linq.Expressions.LambdaExpression,Raven.Client.Document.DocumentConvention,System.String,System.Boolean)">
            <summary>
            Perform the actual generation
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.RavenDocumentsByEntityName">
            <summary>
             Create an index that allows to tag entities by their entity name
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.RavenDocumentsByEntityName.CreateIndexDefinition">
            <summary>
            Creates the Raven/DocumentsByEntityName index
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.RavenDocumentsByEntityName.IndexName">
            <summary>
            Return the actual index name
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.SpatialIndex">
            <summary>
            Accessor for generating spatial queries on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.SpatialIndex.Generate(System.Double,System.Double)">
            <summary>
            Marker method for allowing generating spatial indexes on the client
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.ExpressionInfo">
            <summary>
            This class represents a node in an expression, usually a member - but in the case of dynamic queries the path to a member
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.ExpressionInfo.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates an ExpressionMemberInfo
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Path">
            <summary>
            Gets the full path of the member being referred to by this node
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Type">
            <summary>
            Gets the actual type being referred to
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.IsNestedPath">
            <summary>
            Whatever the expression is of a nested path
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryable`1">
            <summary>
            An implementation of <see cref="T:System.Linq.IOrderedQueryable`1"/> with Raven specific operation
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryProvider">
            <summary>
            Extension for the built-in <see cref="T:System.Linq.IQueryProvider"/> allowing for Raven specific operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the Linq query to a Lucene query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Convert the Linq query to a lazy Lucene query and provide a function to execute when it is being evaluate
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.CustomizeQuery">
            <summary>
            The action to execute on the customize query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.LinqExtensions">
            <summary>
             Extensions to the linq syntax
            </summary>
            <summary>
             Extensions to the linq syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToFacets``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Query the facets results for this query using the specified facet document
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToFacetsAsync``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Query the facets results for this query using the specified facet document
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.As``1(System.Linq.IQueryable)">
            <summary>
            Project using a different type
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Intersect``1(System.Linq.IQueryable{``0})">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.AsProjection``1(System.Linq.IQueryable)">
            <summary>
            Project using a different type
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Suggest(System.Linq.IQueryable)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Suggest(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.SuggestLazy(System.Linq.IQueryable)">
            <summary>
            Lazy Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.SuggestLazy(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Lazy Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.SuggestAsync(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.SuggestAsync(System.Linq.IQueryable)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Search``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Decimal,Raven.Client.Linq.SearchOptions,Raven.Client.Linq.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            As well as a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns the total count of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Include``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <param name="source">The source for querying</param>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Include``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
            <param name="source">The source for querying</param>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
             implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.In``1(``0,``0[])">
            <summary>
             implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqExtensions.Skip``1(Raven.Client.Linq.IRavenQueryable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            Summary:
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryInspector`1">
            <summary>
            Implements <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.#ctor(Raven.Client.Linq.IRavenQueryProvider,Raven.Client.Linq.RavenQueryStatistics,System.String,System.Linq.Expressions.Expression,Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryInspector`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetLastEqualityTerm">
            <summary>
             Get the last equality term for the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.FieldsToFetch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.DatabaseCommands">
            <summary>
            Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.AsyncDatabaseCommands">
            <summary>
            Grant access to the async database commands
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProvider`1">
            <summary>
            An implementation of <see cref="T:Raven.Client.Linq.IRavenQueryProvider"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.String,Raven.Client.Linq.RavenQueryStatistics,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProvider`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.CustomizedQuery">
            <summary>
            Gets the actions for customizing the generated lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToRename">
            <summary>
            Set the fields to rename
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1">
            <summary>
            Process a Linq expression to a Lucene query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.queryGenerator">
            <summary>
            The query generator
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.indexName">
            <summary>
            The index name
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.Action{Raven.Client.IDocumentQueryCustomization},System.Action{Raven.Abstractions.Data.QueryResult},System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProviderProcessor`1"/> class.
            </summary>
            <param name="queryGenerator">The document query generator.</param>
            <param name="customizeQuery">The customize query.</param>
            <param name="afterQueryExecuted">Executed after the query run, allow access to the query results</param>
            <param name="indexName">The name of the index the query is executed against.</param>
            <param name="fieldsToFetch">The fields to fetch in this query</param>
            <param name="fieldsTRename">The fields to rename for the results of this query</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression and generate the lucene query
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets member info for the specified expression and the path to that expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetPath(System.Linq.Expressions.Expression,System.String@,System.Type@,System.Boolean@)">
            <summary>
            Get the path from the expression, including considering dictionary calls
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Get the member expression from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetValueFromExpression(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Get the actual value from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetAsyncLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.CurrentPath">
            <summary>
            Gets the current path in the case of expressions within collections
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToRename">
            <summary>
            Rename the fields from one name to another
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType">
            <summary>
            Different query types 
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Count">
            <summary>
            Get count of items for the query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.First">
            <summary>
            Get only the first item
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.FirstOrDefault">
            <summary>
            Get only the first item (or null)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Single">
            <summary>
            Get only the first item (or throw if there are more than one)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.SingleOrDefault">
            <summary>
            Get only the first item (or throw if there are more than one) or null if empty
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryStatistics">
            <summary>
            Statistics about a raven query.
            Such as how many records match the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryStatistics.UpdateQueryStats(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Update the query stats from the query results
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IsStale">
            <summary>
            Whatever the query returned potentially stale results
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.TotalResults">
            <summary>
            What was the total count of the results that matched the query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.SkippedResults">
            <summary>
            Gets or sets the skipped results (duplicate documents);
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.Timestamp">
            <summary>
            The time when the query results were unstale.
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexName">
            <summary>
            The name of the index queried
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexTimestamp">
            <summary>
            The timestamp of the queried index
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexEtag">
            <summary>
            The etag of the queried index
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryStatistics.NonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether any of the documents returned by this query
            are non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.IShardResolutionStrategy">
            <summary>
            Implementers of this interface provide a way to decide which shards will be queried
            for a specified operation
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.GenerateShardIdFor(System.Object)">
            <summary>
             Generate a shard id for the specified entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.MetadataShardIdFor(System.Object)">
            <summary>
             The shard id for the server that contains the metadata (such as the HiLo documents)
             for the given entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.PotentialShardsFor(Raven.Client.Shard.ShardRequestData)">
            <summary>
             Selects the shard ids appropriate for the specified data.
             </summary><returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardedDocumentSession">
            <summary>
            Implements Unit of Work for accessing a set of sharded RavenDB servers
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.#ctor(Raven.Client.Shard.ShardedDocumentStore,Raven.Client.Document.DocumentSessionListeners,System.Guid,Raven.Client.Shard.ShardStrategy,System.Collections.Generic.IDictionary{System.String,Raven.Client.Connection.IDatabaseCommands})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentSession"/> class.
            </summary>
            <param name="shardStrategy">The shard strategy.</param>
            <param name="shardDbCommands">The shard IDatabaseCommands.</param>
            <param name="id"></param>
            <param name="documentStore"></param>
            <param name="listeners"></param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns>The token representing the distributed transaction</returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
            <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.String,System.Action{``0})">
            <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.ValueType,System.Action{``0})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.LazyLoadInternal``1(System.String[],System.String[],System.Action{``0[]})">
            <summary>
            Register to lazily load documents and include
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``1">
            <summary>
            Query RavenDB dynamically using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.Lazily">
            <summary>
            Access the lazy operations
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.Eagerly">
            <summary>
            Access the eager operations
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardedDocumentStore">
            <summary>
            Implements a sharded document store
            Hiding most sharding details behind this and the <see cref="T:Raven.Client.Shard.ShardedDocumentSession"/> gives you the ability to use
            sharding without really thinking about this too much
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.#ctor(Raven.Client.Shard.ShardStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentStore"/> class.
            </summary>
            <param name="shardStrategy">The shard strategy.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cacheDuration">Specify the aggressive cache duration</param>
            <remarks>
            aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that has been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(Raven.Client.Document.OpenSessionOptions)">
            <summary>
            Opens the session with the specified options.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation against each of the shards.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentStore.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.IShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
            <summary>
            Applies the specified action to all shard sessions.
            </summary>
        </member>
        <member name="E:Raven.Client.Shard.IShardAccessStrategy.OnError">
            <summary>
            Occurs on error, allows to handle an error one (or more) of the nodes
            is failing
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ParallelShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session in parallel
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ParallelShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
            <summary>
            Applies the specified action to all shard sessions in parallel
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.SequentialShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session in sequence
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.SequentialShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
            <summary>
            Applies the specified action for all shard sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commands">The shard sessions.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.GenerateShardIdFor(System.Object)">
            <summary>
             Generate a shard id for the specified entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.MetadataShardIdFor(System.Object)">
            <summary>
             The shard id for the server that contains the metadata (such as the HiLo documents)
             for the given entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.PotentialShardsFor(Raven.Client.Shard.ShardRequestData)">
            <summary>
             Selects the shard ids appropriate for the specified data.
             </summary><returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardRequestData">
            <summary>
            Information required to resolve the appropriate shard for an entity / entity and key
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.Keys">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.Query">
            <summary>
            Gets or sets the query being executed
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy">
            <summary>
            Default shard strategy for the sharding document store
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.DefaultMergeQueryResults(Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.IList{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Merge the query results from all the shards into a single query results object by simply
            concatenating all of the values
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``1">
            <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity"/> instances based on 
            round robin strategy.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.String,System.String})">
            <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity"/> instances based on 
            the property specified in <paramref name="shardingProperty"/>, with an optional translation to
            the shard id.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,System.String},System.Func{System.String,System.String})">
            <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity"/> instances based on 
            the property specified in <paramref name="shardingProperty"/>, with an optional translation of the value
            from a non string representation to a string and from a string to the shard id.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.MergeQueryResults">
            <summary>
            Merge the query results from all the shards into a single query results object
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolutionStrategy">
            <summary>
            Gets or sets the shard resolution strategy.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardAccessStrategy">
            <summary>
            Gets or sets the shard access strategy.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ModifyDocumentId">
            <summary>
            Get or sets the modification for the document id for sharding
            </summary>
        </member>
        <member name="T:Raven.Client.StoredEntityEventArgs">
            <summary>
            The event arguments raised when an entity is stored
            </summary>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.SessionIdentifier">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>The session identifier.</value>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.EntityInstance">
            <summary>
            Gets or sets the entity instance.
            </summary>
            <value>The entity instance.</value>
        </member>
        <member name="T:Raven.Client.Util.Inflector">
            <summary>
            The Inflector class transforms words from one 
            form to another. For example, from singular to plural.
            </summary>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Pluralize(System.String)">
            <summary>
            Return the plural of a word.
            </summary>
            <param name="word">The singular form</param>
            <returns>The plural form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Singularize(System.String)">
            <summary>
            Return the singular of a word.
            </summary>
            <param name="word">The plural form</param>
            <returns>The singular form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Capitalize(System.String)">
            <summary>
            Capitalizes a word.
            </summary>
            <param name="word">The word to be capitalized.</param>
            <returns><paramref name="word"/> capitalized.</returns>
        </member>
        <member name="T:Raven.Client.Util.ObjectReferenceEqualityComparerer`1">
            <summary>
            A generic object comparerer that would only use object's reference, 
            ignoring any <see cref="T:System.IEquatable`1"/> or <see cref="M:System.Object.Equals(System.Object)"/>  overrides.
            </summary>
        </member>
        <member name="F:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.Default">
            <summary>
            The default ObjectReferenceEqualityComparerer instance
            </summary>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type <typeparamref name="T"/> are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.GetHashCode(`0)">
            <summary>
            When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The object for which to get a hash code.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Raven.Client.WhereParams">
            <summary>
            Parameters for the Where Equals call
            </summary>
        </member>
        <member name="M:Raven.Client.WhereParams.#ctor">
            <summary>
            Create a new instance 
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.FieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.Value">
            <summary>
            The field value
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.IsAnalyzed">
            <summary>
            Should the field be analyzed
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.AllowWildcards">
            <summary>
            Should the field allow wildcards
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.IsNestedPath">
            <summary>
            Is this a root property or not?
            </summary>
        </member>
    </members>
</doc>
