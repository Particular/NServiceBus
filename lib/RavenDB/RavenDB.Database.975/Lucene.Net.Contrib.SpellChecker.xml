<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lucene.Net.Contrib.SpellChecker</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:SpellChecker.Net.Search.Spell.PlainTextDictionary" -->
        <member name="T:SpellChecker.Net.Search.Spell.Dictionary">
            <summary> A simple interface representing a Dictionary</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.Dictionary.GetWordsIterator">
            <summary> return all the words present in the dictionary</summary>
            <returns> Iterator
            </returns>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.LuceneDictionary">
            <summary> Lucene Dictionary
            
            </summary>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.SuggestWord">
            <summary>  SuggestWord Class, used in suggestSimilar method in SpellChecker class.
            
            </summary>
            <author>  Nicolas Maisonneuve
            </author>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.score">
            <summary> the score of the word</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.freq">
            <summary> The freq of the word</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SuggestWord.string_Renamed">
            <summary> the suggested word</summary>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.StringDistance">
            <summary>
            Interface for string distances.
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.StringDistance.GetDistance(System.String,System.String)">
            <summary>
            Returns a float between 0 and 1 based on how similar the specified strings are to one another.  
            Returning a value of 1 means the specified strings are identical and 0 means the
            string are maximally different.
            </summary>
            <param name="s1">The first string.</param>
            <param name="s2">The second string.</param>
            <returns>a float between 0 and 1 based on how similar the specified strings are to one another.</returns>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.TRStringDistance">
            <summary> Edit distance  class</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.TRStringDistance.#ctor(System.String)">
            <summary> Optimized to run a bit faster than the static getDistance().
            In one benchmark times were 5.3sec using ctr vs 8.5sec w/ static method, thus 37% faster.
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.TRStringDistance.Form(System.Int32,System.Int32)">
            <summary> </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.JaroWinklerDistance.SetThreshold(System.Single)">
             <summary>
            Sets the threshold used to deterMine when Winkler bonus should be used.
             Set to a negative value to get the Jaro distance.
             </summary>
             <param name="threshold">the new value of the threshold</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.JaroWinklerDistance.GetThreshold">
            <summary>
            Returns the current value of the threshold used for adding the Winkler bonus.
            The default value is 0.7.
            </summary>
            <returns>the current value of the threshold</returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.NGramDistance.#ctor(System.Int32)">
            <summary>
            Creates an N-Gram distance measure using n-grams of the specified size.
            </summary>
            <param name="size">The size of the n-gram to be used to compute the string distance.</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.NGramDistance.#ctor">
            <summary>
            Creates an N-Gram distance measure using n-grams of size 2.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SpellChecker.Net.Search.Spell.SpellChecker" -->
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.F_WORD">
            <summary> Field name for each word in the ngram index.</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.spellindex">
            <summary> the spell index</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.bStart">
            <summary> Boost value for start and end grams</summary>
        </member>
        <member name="F:SpellChecker.Net.Search.Spell.SpellChecker.searcherLock">
            <summary>
            this locks all modifications to the current searcher. 
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.#ctor(Lucene.Net.Store.Directory,SpellChecker.Net.Search.Spell.StringDistance)">
            <summary>
            Use the given directory as a spell checker index. The directory
            is created if it doesn't exist yet.
            </summary>
            <param name="gramIndex">the spell index directory</param>
            <param name="sd">the {@link StringDistance} measurement to use </param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.#ctor(Lucene.Net.Store.Directory)">
            <summary>
            Use the given directory as a spell checker index with a
            {@link LevensteinDistance} as the default {@link StringDistance}. The
            directory is created if it doesn't exist yet.
            </summary>
            <param name="gramIndex">the spell index directory</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SetSpellIndex(Lucene.Net.Store.Directory)">
            <summary>
            Use a different index as the spell checker index or re-open
            the existing index if <code>spellIndex</code> is the same value
            as given in the constructor.
            </summary>
            <param name="spellIndexDir">spellIndexDir the spell directory to use </param>
            <throws>AlreadyClosedException if the Spellchecker is already closed</throws>
            <throws>IOException if spellchecker can not open the directory</throws>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.setStringDistance(SpellChecker.Net.Search.Spell.StringDistance)">
            <summary>
            Sets the {@link StringDistance} implementation for this
            {@link SpellChecker} instance.
            </summary>
            <param name="sd">the {@link StringDistance} implementation for this
            {@link SpellChecker} instance.</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.GetStringDistance">
            <summary>
            Returns the {@link StringDistance} instance used by this
            {@link SpellChecker} instance.
            </summary>
            <returns>
            Returns the {@link StringDistance} instance used by this
            {@link SpellChecker} instance.
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SetAccuracy(System.Single)">
            <summary>  Set the accuracy 0 &lt; min &lt; 1; default 0.5</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SuggestSimilar(System.String,System.Int32)">
            <summary> Suggest similar words</summary>
            <param name="word">String the word you want a spell check done on
            </param>
            <param name="num_sug">int the number of suggest words
            </param>
            <throws>  IOException </throws>
            <returns> String[]
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.SuggestSimilar(System.String,System.Int32,Lucene.Net.Index.IndexReader,System.String,System.Boolean)">
            <summary> Suggest similar words (restricted or not to a field of a user index)</summary>
            <param name="word">String the word you want a spell check done on
            </param>
            <param name="numSug">int the number of suggest words
            </param>
            <param name="ir">the indexReader of the user index (can be null see field param)
            </param>
            <param name="field">String the field of the user index: if field is not null, the suggested
            words are restricted to the words present in this field.
            </param>
            <param name="morePopular">boolean return only the suggest words that are more frequent than the searched word
            (only if restricted mode = (indexReader!=null and field!=null)
            </param>
            <throws>  IOException </throws>
            <returns> String[] the sorted list of the suggest words with this 2 criteria:
            first criteria: the edit distance, second criteria (only if restricted mode): the popularity
            of the suggest words in the field of the user index
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Add(Lucene.Net.Search.BooleanQuery,System.String,System.String,System.Single)">
            <summary> Add a clause to a boolean query.</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Add(Lucene.Net.Search.BooleanQuery,System.String,System.String)">
            <summary> Add a clause to a boolean query.</summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.FormGrams(System.String,System.Int32)">
            <summary> Form all ngrams for a given word.</summary>
            <param name="text">the word to parse
            </param>
            <param name="ng">the ngram length e.g. 3
            </param>
            <returns> an array of all ngrams in the word and note that duplicates are not removed
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.ClearIndex">
            <summary>
            Removes all terms from the spell check index.
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.Exist(System.String)">
            <summary> Check whether the word exists in the index.</summary>
            <param name="word">String
            </param>
            <throws>  IOException </throws>
            <returns> true iff the word exists in the index
            </returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.IndexDictionary(SpellChecker.Net.Search.Spell.Dictionary,System.Int32,System.Int32)">
            <summary> Index a Dictionary</summary>
            <param name="dict">the dictionary to index</param>
            <param name="mergeFactor">mergeFactor to use when indexing</param>
            <param name="ramMB">the max amount or memory in MB to use</param>
            <throws>  IOException </throws>
            <throws>AlreadyClosedException if the Spellchecker is already closed</throws>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.IndexDictionary(SpellChecker.Net.Search.Spell.Dictionary)">
            <summary>
            Indexes the data from the given {@link Dictionary}.
            </summary>
            <param name="dict">dict the dictionary to index</param>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.CreateSearcher(Lucene.Net.Store.Directory)">
            <summary>
            Creates a new read-only IndexSearcher (for testing purposes)
            </summary>
            <param name="dir">dir the directory used to open the searcher</param>
            <returns>a new read-only IndexSearcher. (throws IOException f there is a low-level IO error)</returns>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.SpellChecker.IsClosed">
             <summary>
             Returns <code>true</code> if and only if the {@link SpellChecker} is
             closed, otherwise <code>false</code>.
             </summary>
             <returns><code>true</code> if and only if the {@link SpellChecker} is
                     closed, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="T:SpellChecker.Net.Search.Spell.LevenshteinDistance">
            <summary>
            Levenshtein edit distance
            </summary>
        </member>
        <member name="M:SpellChecker.Net.Search.Spell.LevenshteinDistance.GetDistance(System.String,System.String)">
            <summary>
            Returns a float between 0 and 1 based on how similar the specified strings are to one another.  
            Returning a value of 1 means the specified strings are identical and 0 means the
            string are maximally different.
            </summary>
            <param name="target">The first string.</param>
            <param name="other">The second string.</param>
            <returns>a float between 0 and 1 based on how similar the specified strings are to one another.</returns>
        </member>
    </members>
</doc>
