<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Database</name>
    </assembly>
    <members>
        <member name="M:Raven.Database.Backup.DirectoryBackup.Execute">
            <summary>
            The process for backing up a directory index is simple:
            a) create hard links to all the files in the lucene directory in a temp director
               that gives us the current snapshot, and protect us from lucene's
               deleting files.
            b) copy the hard links to the destination directory
            c) delete the temp directory
            </summary>
        </member>
        <member name="T:Raven.Database.Backup.RemoveBackupDocumentStartupTask">
            <summary>
            Delete the backup status document, if it indicate a backup was in progress when the server crashed / shutdown
            we have to do that to enable the next backup to complete
            </summary>
        </member>
        <member name="M:Raven.Database.Impl.Clustering.ClusterInspecter.ResUtilGetSzValue(System.UIntPtr,System.String)">
            <summary>
            Returns a string value from the cluster database.
            </summary>
            <param name="hkeyClusterKey">Key identifying the location of the value in the cluster database.</param>
            <param name="pszValueName">A null-terminated Unicode string containing the name of the value to retrieve.</param>
            <returns>If the operation succeeds, the function returns a pointer to a buffer containing the string value.</returns>
        </member>
        <member name="F:Raven.Database.Impl.Clustering.NodeClusterState.ClusterStateNotInstalled">
            <summary>
            The Cluster service is not installed on the node.
            </summary>
        </member>
        <member name="F:Raven.Database.Impl.Clustering.NodeClusterState.ClusterStateNotConfigured">
            <summary>
            The Cluster service is installed on the node but has not yet been configured.
            </summary>
        </member>
        <member name="F:Raven.Database.Impl.Clustering.NodeClusterState.ClusterStateNotRunning">
            <summary>
            The Cluster service is installed and configured on the node but is not currently running.
            </summary>
        </member>
        <member name="F:Raven.Database.Impl.Clustering.NodeClusterState.ClusterStateRunning">
            <summary>
            The Cluster service is installed, configured, and running on the node.
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.BaseBatchSizeAutoTuner.OutOfMemoryExceptionHappened">
            <summary>
            This let us know that an OOME has happened, and we need to be much more
            conservative with regards to how fast we can grow memory.
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.DefaultBackgroundTaskExecuter.ExecuteAll``1(Raven.Database.Config.InMemoryRavenConfiguration,System.Threading.Tasks.TaskScheduler,System.Collections.Generic.IList{``0},System.Action{``0,System.Int64})">
            <summary>
            Note that we assume that source is a relatively small number, expected to be 
            the number of indexes, not the number of documents.
            </summary>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractPutTrigger.AllowPut(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,Raven.Abstractions.Data.TransactionInformation)">
            <summary>
             Ask the trigger whatever the PUT should be vetoed.
             If the trigger vote to veto the PUT, it needs to provide a human readable 
             explanation why the PUT was rejected.
             </summary><remarks>
             This method SHOULD NOT modify either the document or the metadata.
             </remarks><param name="key">The document key</param><param name="document">The new document about to be put into Raven</param><param name="metadata">The new document metadata</param><param name="transactionInformation">The current transaction, if it exists</param><returns>Whatever the put was vetoed or not</returns>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractPutTrigger.OnPut(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,Raven.Abstractions.Data.TransactionInformation)">
            <summary>
             Allow the trigger to perform any logic just before the document is saved to disk.
             Any modifications the trigger makes to the document or the metadata will be persisted 
             to disk.
             </summary><remarks>
             If the trigger need to access the previous state of the document, the trigger should
             implement <seealso cref="T:Raven.Database.Plugins.IRequiresDocumentDatabaseInitialization"/> and use the provided
             <seealso cref="T:Raven.Database.DocumentDatabase"/> instance to Get it. The returned result would be the old
             document (if it exists) or null.
             Any call to the provided <seealso cref="T:Raven.Database.DocumentDatabase"/> instance will be done under the
             same transaction as the PUT operation.
             </remarks><param name="key">The document key</param><param name="document">The new document about to be put into Raven</param><param name="metadata">The new document metadata</param><param name="transactionInformation">The current transaction, if it exists</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractPutTrigger.AfterPut(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Guid,Raven.Abstractions.Data.TransactionInformation)">
            <summary>
             Allow the trigger to perform any logic after the document was put but still in the 
             same transaction as the put
             </summary><remarks>
             Any call to the provided <seealso cref="T:Raven.Database.DocumentDatabase"/> instance will be done under the
             same transaction as the PUT operation.
             </remarks><param name="key">The document key</param><param name="document">The new document about to be put into Raven</param><param name="metadata">The new document metadata</param>
            <param name="etag">The etag of the just put document</param>
            <param name="transactionInformation">The current transaction, if it exists</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractPutTrigger.AfterCommit(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Guid)">
            <summary>
             Allow the trigger to perform any logic _after_ the transaction was committed.
             For example, by notifying interested parties.
             </summary><remarks>
             This method SHOULD NOT modify either the document or the metadata
             </remarks><param name="key">The document key</param><param name="document">The document that was put into Raven</param><param name="metadata">The document metadata</param>
            <param name="etag">The etag of the just put document</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractDeleteTrigger.AllowDelete(System.String,Raven.Abstractions.Data.TransactionInformation)">
            <summary>
             Ask the trigger whatever the DELETE should be vetoed.
             If the trigger vote to veto the DELETE, it needs to provide a human readable 
             explanation why the DELETE was rejected.
             </summary><remarks>
             This method SHOULD NOT modify either the document or the metadata.
             </remarks><param name="key">The document key</param><param name="transactionInformation">The current transaction, if any</param><returns>Whatever the put was vetoed or not</returns>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractDeleteTrigger.OnDelete(System.String,Raven.Abstractions.Data.TransactionInformation)">
            <summary>
             Allow the trigger to perform any logic just before the document is deleted.
             </summary><remarks>
             If the trigger need to access the previous state of the document, the trigger should
             implement <seealso cref="T:Raven.Database.Plugins.IRequiresDocumentDatabaseInitialization"/> and use the provided
             <seealso cref="T:Raven.Database.DocumentDatabase"/> instance to Get it. The returned result would be the old
             document (if it exists) or null.
             Any call to the provided <seealso cref="T:Raven.Database.DocumentDatabase"/> instance will be done under the
             same transaction as the DELETE operation.
             </remarks><param name="transactionInformation">The current transaction, if any</param><param name="key">The document key</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractDeleteTrigger.AfterDelete(System.String,Raven.Abstractions.Data.TransactionInformation)">
            <summary>
             Allow the trigger to perform any logic after the document was deleted but still in the 
             same transaction as the delete.
             This method is called only if a row was actually deleted
             </summary><remarks>
             Any call to the provided <seealso cref="T:Raven.Database.DocumentDatabase"/> instance will be done under the
             same transaction as the DELETE operation.
             </remarks><param name="transactionInformation">The current transaction, if any</param><param name="key">The document key</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractDeleteTrigger.AfterCommit(System.String)">
            <summary>
             Allow the trigger to perform any logic _after_ the transaction was committed.
             For example, by notifying interested parties.
             </summary><param name="key">The document key</param>
        </member>
        <member name="T:Rhino.Licensing.AbstractLicenseValidator">
            <summary>
            Base license validator.
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.Logger">
            <summary>
            License validator logger
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.TimeServers">
            <summary>
            Standard Time servers
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String)">
            <summary>
            Creates a license validator with specfied public key.
            </summary>
            <param name="publicKey">public key</param>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String,System.String,System.Guid)">
            <summary>
            Creates a license validator using the client information
            and a service endpoint address to validate the license.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.AssertValidLicense">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.AssertValidLicense(System.Action)">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryOverwritingWithNewLicense(System.String)">
            <summary>
            Loads the license file.
            </summary>
            <param name="newLicense"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.RemoveExistingLicense">
            <summary>
            Removes existing license from the machine.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryLoadingLicenseValuesFromValidatedXml">
            <summary>
            Loads license data from validated license file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.DisableFutureChecks">
            <summary>
            Disables further license checks for the session.
            </summary>
        </member>
        <member name="E:Rhino.Licensing.AbstractLicenseValidator.LicenseInvalidated">
            <summary>
            Fired when license data is invalidated
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.ExpirationDate">
            <summary>
            Gets the expiration date of the license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsageBehavior">
            <summary>
            How to behave when using the same license multiple times
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.SubscriptionEndpoint">
            <summary>
            Gets or Sets the endpoint address of the subscription service
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseType">
            <summary>
            Gets the Type of the license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.UserId">
            <summary>
            Gets the Id of the license holder
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.Name">
            <summary>
            Gets the name of the license holder
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.DisableFloatingLicenses">
            <summary>
            Gets or Sets Floating license support
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseAttributes">
            <summary>
            Gets extra license information
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.License">
            <summary>
            Gets or Sets the license content
            </summary>
        </member>
        <member name="T:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage">
            <summary>
            Options for detecting multiple licenses
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage.Deny">
            <summary>
            Deny if multiple licenses are used
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage.AllowForSameUser">
            <summary>
            Only allow if it is running for the same user
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage.AllowSameLicense">
            <summary>
            Allow multiple copies of the same license to exist
            Usually valid for OEM scenarios
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryClient">
            <summary>
             Publish the presence of a client over the network
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryClient.PublishMyPresence">
            <summary>
             Publish the presence of this node
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryHost">
            <summary>
             Listen to presence notifications
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryHost.Start">
            <summary>
             Starts listening to network notifications
            </summary>
        </member>
        <member name="E:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscovered">
            <summary>
             Notify when a client is discovered
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs">
            <summary>
            Notification raised when a client is discovered
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.UserId">
            <summary>
            The client's license id
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.MachineName">
            <summary>
            The client machine name
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.UserName">
            <summary>
            The client user name
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.SenderId">
            <summary>
            The id of the sender
            </summary>
        </member>
        <member name="T:Rhino.Licensing.FloatingLicenseNotAvialableException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rhino.Licensing.RhinoLicensingException">
            <summary>
            Base class for all licensing exceptions.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvialableException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvialableException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvialableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvialableException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvialableException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvialableException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvialableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvialableException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.ILicensingService">
            <summary>
            Service contract of the licensing server.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.ILicensingService.LeaseLicense(System.String,System.String,System.Guid)">
            <summary>
            Issues a float license for the user.
            </summary>
            <param name="machine">machine name</param>
            <param name="user">user name</param>
            <param name="id">Id of the license holder</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.InvalidationType">
            <summary>
            InvalidationType
            </summary>
        </member>
        <member name="F:Rhino.Licensing.InvalidationType.CannotGetNewLicense">
            <summary>
            Can not create a new license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.InvalidationType.TimeExpired">
            <summary>
            License is expired
            </summary>
        </member>
        <member name="T:Rhino.Licensing.ISubscriptionLicensingService">
            <summary>
            Service contract of subscription server.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.ISubscriptionLicensingService.LeaseLicense(System.String)">
            <summary>
            Issues a leased license
            </summary>
            <param name="previousLicense"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.LicenseExpiredException">
            <summary>
             Thrown when license is found but is past it's expiration date
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseFileNotFoundException">
            <summary>
            Thrown when a valid license file can not be
            found on the client machine.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseGenerator">
            <summary>
            LicenseGenerator generates and signs license.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseGenerator"/>. 
            </summary>
            <param name="privateKey">private key of the product</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.GenerateFloatingLicense(System.String,System.String)">
            <summary>
            Generates a new floating license.
            </summary>
            <param name="name">Name of the license holder</param>
            <param name="publicKey">public key of the license server</param>
            <returns>license content</returns>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.Generate(System.String,System.Guid,System.DateTime,Rhino.Licensing.LicenseType)">
            <summary>
            Generates a new license
            </summary>
            <param name="name">name of the license holder</param>
            <param name="id">Id of the license holder</param>
            <param name="expirationDate">expiry date</param>
            <param name="licenseType">type of the license</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.Generate(System.String,System.Guid,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.String},Rhino.Licensing.LicenseType)">
            <summary>
            Generates a new license
            </summary>
            <param name="name">name of the license holder</param>
            <param name="id">Id of the license holder</param>
            <param name="expirationDate">expiry date</param>
            <param name="licenseType">type of the license</param>
            <param name="attributes">extra information stored as key/valye in the license file</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.LicenseNotFoundException">
            <summary>
            Thrown when suitable license is not found.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">steaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseType">
            <summary>
            License Type
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.None">
            <summary>
            No type specified
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Trial">
            <summary>
            For trial use
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Standard">
            <summary>
            Standard license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Personal">
            <summary>
            For personal use
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Floating">
            <summary>
            Floating license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Subscription">
            <summary>
            Subscription based license
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicenseValidator">
            <summary>
            License validator validates a license file
            that can be located on disk.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator"/>.
            </summary>
            <param name="publicKey">public key</param>
            <param name="licensePath">path to license file</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String,System.String,System.Guid)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator"/>.
            </summary>
            <param name="publicKey">public key</param>
            <param name="licensePath">path to license file</param>
            <param name="licenseServerUrl">license server endpoint address</param>
            <param name="clientId">Id of the license holder</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.AssertValidLicense">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.RemoveExistingLicense">
            <summary>
            Removes existing license from the machine.
            </summary>
        </member>
        <member name="P:Rhino.Licensing.LicenseValidator.License">
            <summary>
            Gets or Sets the license content
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicensingService">
            <summary>
            Licensing server implementation.
            Because we use this service behavior, we don't have to worry 
            about multi threading issues. it is not something that we 
            expect to have to deal with huge load, anyway.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicensingService.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicensingService"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicensingService.LeaseLicense(System.String,System.String,System.Guid)">
            <summary>
            Leases a new license to the client machine.
            </summary>
            <param name="machine">client machine name</param>
            <param name="user">user name</param>
            <param name="id">Id of the license holder</param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Licensing.LicensingService.SoftwarePublicKey">
            <summary>
            Gets or Sets the public key of the product
            </summary>
        </member>
        <member name="P:Rhino.Licensing.LicensingService.LicenseServerPrivateKey">
            <summary>
            Gets or Sets the private key of the license server
            </summary>
        </member>
        <member name="M:Rhino.Licensing.CorruptLicenseFileException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.CorruptLicenseFileException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.CorruptLicenseFileException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.CorruptLicenseFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.StringLicenseValidator">
            <summary>
            Validates content of a license file
            </summary>
        </member>
        <member name="M:Rhino.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.StringLicenseValidator"/>
            </summary>
            <param name="publicKey">public key</param>
            <param name="license">license content</param>
        </member>
        <member name="P:Rhino.Licensing.StringLicenseValidator.License">
            <summary>
            License content
            </summary>
        </member>
        <member name="T:Raven.Database.Linq.PrivateExtensions.DynamicExtensionMethods">
            <summary>
            Extension methods that we are translating on dynamic objects during the 
            translation phase of the indx compilation
            </summary>
        </member>
        <member name="T:Raven.Database.Plugins.AbstractIndexQueryTrigger">
            <summary>
            Allows to extend the query parsing capability of RavenDB, providing users with a way to modify
            the queries before they are executed against the index
            </summary>
        </member>
        <member name="T:Raven.Database.Exceptions.BadRequestException">
            <summary>
            This exception is raised when a bad request is made to the server
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.BadRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.BadRequestException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.BadRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Database.Data.AttachmentInformation">
            <summary>
            Describe an attachment, but without the actual attachment data
            </summary>
        </member>
        <member name="P:Raven.Database.Data.AttachmentInformation.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Raven.Database.Data.AttachmentInformation.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.Data.AttachmentInformation.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Database.Data.AttachmentInformation.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="T:Raven.Database.Linq.ITranslatorDatabaseAccessor">
            <summary>
            This is used to provide a way for a translator function 
            to access values from the database
            </summary>
        </member>
        <member name="M:Raven.Database.Linq.ITranslatorDatabaseAccessor.Load(System.Object)">
            <summary>
            Returns the document matching this id, if exists, or null if it doesn't
            </summary>
        </member>
        <member name="M:Raven.Database.Linq.ITranslatorDatabaseAccessor.Include(System.Object)">
            <summary>
            Returns null object
            </summary>
        </member>
        <member name="M:Raven.Database.Linq.Ast.TransformNullCoalasingOperatorTransformer.VisitBinaryOperatorExpression(ICSharpCode.NRefactory.Ast.BinaryOperatorExpression,System.Object)">
            <summary>
            We have to replace code such as:
            	doc.FirstName ?? ""
            Into 
            	doc.FirstName != null ? doc.FirstName : ""
            Because we use DynamicNullObject instead of null, and that preserve the null coallasing semantics.
            </summary>
        </member>
        <member name="T:Raven.Database.Exceptions.IndexDoesNotExistsException">
            <summary>
            This exception is raised when a query is made against a non existing index
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDoesNotExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDoesNotExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDoesNotExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDoesNotExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Database.Extensions.MonoHttpUtility">
            <summary>
            We have to use this stupid trick because HttpUtility.UrlEncode / Decode
            uses HttpContext.Current under the covers, which doesn't work in IIS7 
            Application_Start
            </summary>
        </member>
        <member name="T:Raven.Database.Indexing.Collation.IndexableBinaryStringTools_UsingArrays">
            <summary> Provides support for converting byte sequences to Strings and back again.
            The resulting Strings preserve the original byte sequences' sort order.
            
            The Strings are constructed using a Base 8000h encoding of the original
            binary data - each char of an encoded String represents a 15-bit chunk
            from the byte sequence.  Base 8000h was chosen because it allows for all
            lower 15 bits of char to be used without restriction; the surrogate range 
            [U+D8000-U+DFFF] does not represent valid chars, and would require
            complicated handling to avoid them and allow use of char's high bit.
            
            Although unset bits are used as padding in the final char, the original
            byte sequence could contain trailing bytes with no set bits (null bytes):
            padding is indistinguishable from valid information.  To overcome this
            problem, a char is appended, indicating the number of encoded bytes in the
            final content char.
            
            This class's operations are defined over CharBuffers and ByteBuffers, to
            allow for wrapped arrays to be reused, reducing memory allocation costs for
            repeated operations.  Note that this class calls array() and arrayOffset()
            on the CharBuffers and ByteBuffers it uses, so only wrapped arrays may be
            used.  This class interprets the arrayOffset() and limit() values returned by
            its input buffers as beginning and end+1 positions on the wrapped array,
            resprectively; similarly, on the output buffer, arrayOffset() is the first
            position written to, and limit() is set to one past the final output array
            position.
            </summary>
            <remarks>
            Note that the reason we have this code here is that we don't want to convert to/from List / array
            which is the case of the same class in the Lucene code.
            </remarks>
        </member>
        <member name="M:Raven.Database.Indexing.Collation.IndexableBinaryStringTools_UsingArrays.GetEncodedLength(System.Collections.Generic.IList{System.Byte})">
            <summary> Returns the number of chars required to encode the given byte sequence.
            
            </summary>
            <param name="original">The byte sequence to be encoded.  Must be backed by an array.
            </param>
            <returns> The number of chars required to encode the given byte sequence
            </returns>
            <throws>  IllegalArgumentException If the given ByteBuffer is not backed by an array </throws>
        </member>
        <member name="M:Raven.Database.Indexing.Collation.IndexableBinaryStringTools_UsingArrays.GetDecodedLength(System.Collections.Generic.IList{System.Char})">
            <summary> Returns the number of bytes required to decode the given char sequence.
            
            </summary>
            <param name="encoded">The char sequence to be encoded.  Must be backed by an array.
            </param>
            <returns> The number of bytes required to decode the given char sequence
            </returns>
            <throws>  IllegalArgumentException If the given CharBuffer is not backed by an array </throws>
        </member>
        <member name="M:Raven.Database.Indexing.Collation.IndexableBinaryStringTools_UsingArrays.Encode(System.Byte[],System.Char[])">
            <summary> Encodes the input byte sequence into the output char sequence.  Before
            calling this method, ensure that the output CharBuffer has sufficient
            capacity by calling {@link #GetEncodedLength(java.nio.ByteBuffer)}.
            
            </summary>
            <param name="input">The byte sequence to encode
            </param>
            <param name="output">Where the char sequence encoding result will go.  The limit
            is set to one past the position of the final char.
            </param>
            <throws>  IllegalArgumentException If either the input or the output buffer </throws>
            <summary>  is not backed by an array
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.Collation.IndexableBinaryStringTools_UsingArrays.Decode(System.Char[],System.Byte[])">
            <summary> Decodes the input char sequence into the output byte sequence.  Before
            calling this method, ensure that the output ByteBuffer has sufficient
            capacity by calling {@link #GetDecodedLength(java.nio.CharBuffer)}.
            
            </summary>
            <param name="input">The char sequence to decode
            </param>
            <param name="output">Where the byte sequence decoding result will go.  The limit
            is set to one past the position of the final char.
            </param>
            <throws>  IllegalArgumentException If either the input or the output buffer </throws>
            <summary>  is not backed by an array
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.Collation.IndexableBinaryStringTools_UsingArrays.Decode(System.Char[])">
            <summary> Decodes the given char sequence, which must have been encoded by
            {@link #Encode(java.nio.ByteBuffer)} or 
            {@link #Encode(java.nio.ByteBuffer, java.nio.CharBuffer)}.
            
            </summary>
            <param name="input">The char sequence to decode
            </param>
            <returns> A byte sequence containing the decoding result.  The limit
            is set to one past the position of the final char.
            </returns>
            <throws>  IllegalArgumentException If the input buffer is not backed by an </throws>
            <summary>  array
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.Collation.IndexableBinaryStringTools_UsingArrays.Encode(System.Byte[])">
            <summary> Encodes the input byte sequence.
            
            </summary>
            <param name="input">The byte sequence to encode
            </param>
            <returns> A char sequence containing the encoding result.  The limit is set
            to one past the position of the final char.
            </returns>
            <throws>  IllegalArgumentException If the input buffer is not backed by an </throws>
            <summary>  array
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.RangeQueryParser.GetRangeQuery(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Detects numeric range terms and expands range expressions accordingly
            </summary>
            <param name="field"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <param name="inclusive"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Database.Indexing.SpatialIndex.MakeQuery(System.Double,System.Double,System.Double)">
            <summary>
            Make a spatial query
            </summary>
            <param name="lat"></param>
            <param name="lng"></param>
            <param name="radius">Radius, in miles</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.ResetIndexOnUncleanShutdown">
            <summary>
            When the database is shut down rudely, determine whatever to reset the index or to check it.
            Checking the index may take some time on large databases
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.BackgroundTasksPriority">
            <summary>
            What thread priority to give the various background tasks RavenDB uses (mostly for indexing)
            Allowed values: Lowest, BelowNormal, Normal, AboveNormal, Highest
            Default: Normal
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.MaxPageSize">
            <summary>
            The maximum allowed page size for queries. 
            Default: 1024
            Minimum: 10
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.MemoryCacheLimitPercentage">
            <summary>
            Percentage of physical memory used for caching
            Allowed values: 0-99 (0 = autosize)
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.MemoryCacheLimitMegabytes">
            <summary>
            An integer value that specifies the maximum allowable size, in megabytes, that caching 
            document instances will use
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.MemoryCacheLimitCheckInterval">
            <summary>
            Interval for checking the memory cache limits
            Allowed values: max precision is 1 second
            Default: 00:02:00 (or value provided by system.runtime.caching app config)
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.IndexingScheduler">
            <summary>
            The indexing scheduler to use
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.MaxNumberOfItemsToIndexInSingleBatch">
            <summary>
            Max number of items to take for indexing in a batch
            Minimum: 128
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.InitialNumberOfItemsToIndexInSingleBatch">
            <summary>
            The initial number of items to take when indexing a batch
            Default: 512 or 256 depending on CPU architecture
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.MaxNumberOfItemsToReduceInSingleBatch">
            <summary>
            Max number of items to take for reducing in a batch
            Minimum: 128
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.InitialNumberOfItemsToReduceInSingleBatch">
            <summary>
            The initial number of items to take when reducing a batch
            Default: 256 or 128 depending on CPU architecture
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.MaxNumberOfParallelIndexTasks">
            <summary>
            The maximum number of indexing tasks allowed to run in parallel
            Default: The number of processors in the current machine
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.TempIndexPromotionThreshold">
            <summary>
            Time (in milliseconds) the index has to be queried at least once in order for it to
            become permanent
            Default: 60000 (once per minute)
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.TempIndexPromotionMinimumQueryCount">
            <summary>
            How many times a temporary, auto-generated index has to be accessed before it can
            be promoted to be a permanent one
            Default: 100
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.TempIndexCleanupPeriod">
            <summary>
            How often to run the temporary index cleanup process (in seconds)
            Default: 600 (10 minutes)
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.TempIndexCleanupThreshold">
            <summary>
            How much time in seconds to wait after a temporary index has been used before removing it if no further
            calls were made to it during that time
            Default: 1200 (20 minutes)
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.TempIndexInMemoryMaxBytes">
            <summary>
            Temp indexes are kept in memory until they reach this integer value in bytes
            Default: 25 MB
            Minimum: 1 MB
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.HostName">
            <summary>
            The hostname to use when creating the http listener (null to accept any hostname or address)
            Default: none, binds to all host names
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.Port">
            <summary>
            The port to use when creating the http listener. 
            Default: 8080. You can set it to *, in which case it will find the first available port from 8080 and upward.
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.AccessControlAllowOrigin">
            <summary>
            Determine the value of the Access-Control-Allow-Origin header sent by the server. 
            Indicates the URL of a site trusted to make cross-domain requests to this server.
            Allowed values: null (don't send the header), *, http://example.org (space separated if multiple sites)
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.AccessControlMaxAge">
            <summary>
            Determine the value of the Access-Control-Max-Age header sent by the server.
            Indicates how long (seconds) the browser should cache the Access Control settings.
            Ignored if AccessControlAllowOrigin is not specified.
            Default: 1728000 (20 days)
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.AccessControlAllowMethods">
            <summary>
            Determine the value of the Access-Control-Allow-Methods header sent by the server.
            Indicates which HTTP methods (verbs) are permitted for requests from allowed cross-domain origins.
            Ignored if AccessControlAllowOrigin is not specified.
            Default: PUT,PATCH,GET,DELETE,POST
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.AccessControlRequestHeaders">
            <summary>
            Determine the value of the Access-Control-Request-Headers header sent by the server.
            Indicates which HTTP headers are permitted for requests from allowed cross-domain origins.
            Ignored if AccessControlAllowOrigin is not specified.
            Allowed values: null (allow whatever headers are being requested), HTTP header field name
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.VirtualDirectory">
            <summary>
            The virtual directory to use when creating the http listener. 
            Default: / 
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.HttpCompression">
            <summary>
            Whether to use http compression or not. 
            Allowed values: true/false; 
            Default: true
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.AnonymousUserAccessMode">
            <summary>
            Defines which operations are allowed for anonymous users.
            Allowed values: All, Get, None
            Default: Get
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.AuthenticationMode">
            <summary>
            Defines which mode to use to authenticate requests
            Allowed values: Windows, OAuth
            Default: Windows
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.AllowLocalAccessWithoutAuthorization">
            <summary>
            If set local request don't require authentication
            Allowed values: true/false
            Default: false
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.OAuthTokenCertificate">
            <summary>
            The certificate to use when verifying access token signatures for OAuth
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.DataDirectory">
            <summary>
            The directory for the RavenDB database. 
            You can use the ~\ prefix to refer to RavenDB's base directory. 
            Default: ~\Data
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.DefaultStorageTypeName">
            <summary>
            What storage type to use (see: RavenDB Storage engines)
            Allowed values: esent, munin
            Default: esent
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.RunInMemory">
            <summary>
            Should RavenDB's storage be in-memory. If set to true, Munin would be used as the
            storage engine, regardless of what was specified for StorageTypeName
            Allowed values: true/false
            Default: false
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.TransactionMode">
            <summary>
            What sort of transaction mode to use. 
            Allowed values: 
            Lazy - faster, but can result in data loss in the case of server crash. 
            Safe - slower, but will never lose data 
            Default: Safe 
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.WebDir">
            <summary>
            The directory to search for RavenDB's WebUI. 
            This is usually only useful if you are debugging RavenDB's WebUI. 
            Default: ~/Raven/WebUI 
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.PluginsDirectory">
            <summary>
            Where to look for plugins for RavenDB. 
            Default: ~\Plugins
            </summary>
        </member>
        <member name="P:Raven.Database.Config.InMemoryRavenConfiguration.MemoryCacheExpiration">
            <summary>
            The expiration value for documents in the internal managed cache
            </summary>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentDeleteTrigger.AllowDelete(System.String)">
            <summary>
             Ask the trigger whatever the DELETE should be vetoed.
             If the trigger vote to veto the DELETE, it needs to provide a human readable 
             explanation why the DELETE was rejected.
             </summary><remarks>
             This method SHOULD NOT modify either the attachment or the metadata.
             </remarks><param name="key">The attachment key</param>
            <returns>Whatever the put was vetoed or not</returns>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentDeleteTrigger.OnDelete(System.String)">
            <summary>
             Allow the trigger to perform any logic just before the attachment is deleted.
             </summary><remarks>
             If the trigger need to access the previous state of the attachment, the trigger should
             implement <seealso cref="T:Raven.Database.Plugins.IRequiresDocumentDatabaseInitialization"/> and use the provided
             <seealso cref="T:Raven.Database.DocumentDatabase"/> instance to Get it. The returned result would be the old
             document (if it exists) or null.
             Any call to the provided <seealso cref="T:Raven.Database.DocumentDatabase"/> instance will be done under the
             same transaction as the DELETE operation.
             </remarks>
            <param name="key">The document key</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentDeleteTrigger.AfterDelete(System.String)">
            <summary>
             Allow the trigger to perform any logic after the attachment was deleted but still in the 
             same transaction as the delete.
             This method is called only if a row was actually deleted
             </summary><remarks>
             Any call to the provided <seealso cref="T:Raven.Database.DocumentDatabase"/> instance will be done under the
             same transaction as the DELETE operation.
             </remarks>
            <param name="key">The attachment key</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentDeleteTrigger.AfterCommit(System.String)">
            <summary>
             Allow the trigger to perform any logic _after_ the transaction was committed.
             For example, by notifying interested parties.
             </summary><param name="key">The attachment key</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentPutTrigger.AllowPut(System.String,System.IO.Stream,Raven.Json.Linq.RavenJObject)">
            <summary>
             Ask the trigger whatever the PUT should be vetoed.
             If the trigger vote to veto the PUT, it needs to provide a human readable 
             explanation why the PUT was rejected.
             </summary><remarks>
             This method SHOULD NOT modify either the document or the metadata.
             </remarks><param name="key">The document key</param>
            <param name="data">The new attachment data about to be put into Raven</param>
            <param name="metadata">The new document metadata</param>
            <returns>Whatever the put was vetoed or not</returns>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentPutTrigger.OnPut(System.String,System.IO.Stream,Raven.Json.Linq.RavenJObject)">
            <summary>
             Allow the trigger to perform any logic just before the document is saved to disk.
             Any modifications the trigger makes to the document or the metadata will be persisted 
             to disk.
             </summary><remarks>
             If the trigger need to access the previous state of the document, the trigger should
             implement <seealso cref="T:Raven.Database.Plugins.IRequiresDocumentDatabaseInitialization"/> and use the provided
             <seealso cref="T:Raven.Database.DocumentDatabase"/> instance to Get it. The returned result would be the old
             document (if it exists) or null.
             Any call to the provided <seealso cref="T:Raven.Database.DocumentDatabase"/> instance will be done under the
             same transaction as the PUT operation.
             </remarks><param name="key">The document key</param>
            <param name="data">The new attachment data about to be put into Raven</param>
            <param name="metadata">The new document metadata</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentPutTrigger.AfterPut(System.String,System.IO.Stream,Raven.Json.Linq.RavenJObject,System.Guid)">
            <summary>
             Allow the trigger to perform any logic after the document was put but still in the 
             same transaction as the put
             </summary><remarks>
             Any call to the provided <seealso cref="T:Raven.Database.DocumentDatabase"/> instance will be done under the
             same transaction as the PUT operation.
             </remarks><param name="key">The document key</param>
            <param name="data">The new attachment data about to be put into Raven</param>
            <param name="metadata">The new document metadata</param>
            <param name="etag">The etag of the just put document</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentPutTrigger.AfterCommit(System.String,System.IO.Stream,Raven.Json.Linq.RavenJObject,System.Guid)">
            <summary>
             Allow the trigger to perform any logic _after_ the transaction was committed.
             For example, by notifying interested parties.
             </summary><remarks>
             This method SHOULD NOT modify either the document or the metadata
             </remarks><param name="key">The document key</param>
            <param name="data">The attachment data that was put into Raven</param>
            <param name="metadata">The document metadata</param>
            <param name="etag">The etag of the just put document</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentReadTrigger.AllowRead(System.String,System.IO.Stream,Raven.Json.Linq.RavenJObject,Raven.Database.Plugins.ReadOperation)">
            <summary>
             Ask the trigger whatever the document should be read by the user.
             </summary><remarks>
             The document and metadata instances SHOULD NOT be modified.
             </remarks>
            <param name="key">The key of the read document - can be null if reading a projection</param>
            <param name="data">The attachment data being read</param>
            <param name="metadata">The document metadata</param>
            <param name="operation">Whatever the operation is a load or a query</param>
            <returns>
             * If the result is Allow, the operation continues as usual. 
             * If the result is Deny, the operation will return an error to the user 
               if asking for a particular document, or an error document in place of 
               the result if asking for a query.
             * If the result is Ignore, the operation will return null to the user if
               asking for a particular document, or skip including the result entirely 
               in the query results.
             </returns>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractAttachmentReadTrigger.OnRead(System.String,Raven.Abstractions.Data.Attachment)">
            <summary>
             Allow the trigger the option of modifying the document and metadata instances
             before the user can see them. 
             </summary><remarks>
             The modified values are transient, and are NOT saved to the database.
            </remarks>
        </member>
        <member name="T:Raven.Database.Linq.GroupByKeyFunc">
            <summary>
            Get the group by value from the document
            </summary>
        </member>
        <member name="T:Raven.Database.Linq.TranslatorFunc">
            <summary>
            	Defining the translator function for a set of results
                about to sent to the user and apply final processing
            </summary>
        </member>
        <member name="T:Raven.Database.Plugins.AbstractReadTrigger">
            <summary>
            * Read triggers may be called on projections from indexes, not just documents
            </summary>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractReadTrigger.AllowRead(System.String,Raven.Json.Linq.RavenJObject,Raven.Database.Plugins.ReadOperation,Raven.Abstractions.Data.TransactionInformation)">
            <summary>
             Ask the trigger whatever the document should be read by the user.
             </summary><remarks>
             The document and metadata instances SHOULD NOT be modified.
             </remarks>
            <param name="key">The key of the read document - can be null if reading a projection</param>
            <param name="metadata">The document metadata</param>
            <param name="operation">Whatever the operation is a load or a query</param>
            <param name="transactionInformation">The transaction information, if any</param>
            <returns>
             * If the result is Allow, the operation continues as usual. 
             * If the result is Deny, the operation will return an error to the user 
               if asking for a particular document, or an error document in place of 
               the result if asking for a query.
             * If the result is Ignore, the operation will return null to the user if
               asking for a particular document, or skip including the result entirely 
               in the query results.
             </returns>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractReadTrigger.OnRead(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,Raven.Database.Plugins.ReadOperation,Raven.Abstractions.Data.TransactionInformation)">
            <summary>
             Allow the trigger the option of modifying the document and metadata instances
             before the user can see them. 
             </summary><remarks>
             The modified values are transient, and are NOT saved to the database.
             </remarks>
            <param name="key">The key of the read document - can be null if reading a projection</param>
            <param name="document">The document being read</param>
            <param name="metadata">The document metadata</param>
            <param name="operation">Whatever the operation is a load or a query</param>
            <param name="transactionInformation">The transaction information, if any</param>
        </member>
        <member name="T:Raven.Database.Plugins.AbstractIndexUpdateTrigger">
            <summary>
            Implementers of this class are called whenever an index entry is 
            created / deleted.
            Work shouldn't be done by the methods of this interface, rather, they
            should be done in a background thread. Communication between threads can
            use either in memory data structure or the persistent (and transactional )
            queue implementation available on the transactional storage.
            </summary>
            <remarks>
            * All operations are delete/create operations, whatever the value
              previously existed or not.
            * It is possible for OnIndexEntryDeleted to be called for non existent
              values.
            * It is possible for a single entry key to be called inserted several times
              entry keys are NOT unique.
            </remarks>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractIndexUpdateTriggerBatcher.OnIndexEntryDeleted(System.String)">
            <summary>
             Notify that a document with the specified key was deleted
             Key may represent a missing document
             </summary>
            <param name="entryKey">The entry key</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractIndexUpdateTriggerBatcher.OnIndexEntryCreated(System.String,Lucene.Net.Documents.Document)">
            <summary>
             Notify that the specified document with the specified key is about 
             to be inserted.
             </summary><remarks>
             You may modify the provided lucene document, changes made to the document
             will be written to the Lucene index
             </remarks>
            <param name="entryKey">The entry key</param><param name="document">The lucene document about to be written</param>
        </member>
        <member name="M:Raven.Database.Plugins.AbstractIndexUpdateTriggerBatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Raven.Database.Data.IndexFailureInformation">
            <summary>
            Information about index failure rates
            </summary>
        </member>
        <member name="M:Raven.Database.Data.IndexFailureInformation.GetErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.IsInvalidIndex">
            <summary>
            Gets a value indicating whether this is invalid index.
            </summary>
            <value>
            	<c>true</c> if this is invalid index; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.Attempts">
            <summary>
            Gets or sets the number of indexing attempts.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.Errors">
            <summary>
            Gets or sets the number of indexing errors.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.Successes">
            <summary>
            Gets or sets the number of indexing successes.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.ReduceAttempts">
            <summary>
            Gets or sets the number of reduce attempts.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.ReduceErrors">
            <summary>
            Gets or sets the number of reduce errors.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.ReduceSuccesses">
            <summary>
            Gets or sets the number of reduce successes.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.FailureRate">
            <summary>
            Gets the failure rate.
            </summary>
            <value>The failure rate.</value>
        </member>
        <member name="T:Raven.Database.Exceptions.IndexDisabledException">
            <summary>
            This exception is raised when querying an index that was disabled because the error rate exceeded safety margins
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor(Raven.Database.Data.IndexFailureInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="information">The information.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Raven.Database.Exceptions.IndexDisabledException.Information">
            <summary>
            Gets or sets the information about the index failure 
            </summary>
            <value>The information.</value>
        </member>
        <member name="T:Raven.Database.Exceptions.OperationVetoedException">
            <summary>
            This exception is raised when an operation has been vetoed by a trigger
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.OperationVetoedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.OperationVetoedException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.OperationVetoedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.OperationVetoedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.OperationVetoedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.OperationVetoedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.OperationVetoedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.OperationVetoedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Database.Indexing.Index">
            <summary>
            	This is a thread safe, single instance for a particular index.
            </summary>
        </member>
        <member name="P:Raven.Database.Indexing.Index.IsMapReduce">
            <summary>
            Whatever this is a map reduce index or not
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.QueryBuilder.PreProcessUntokenizedTerms(System.String,Raven.Database.Indexing.RangeQueryParser)">
            <summary>
            Detects untokenized fields and sets as NotAnalyzed in analyzer
            </summary>
        </member>
        <member name="F:Raven.Database.DocumentDatabase.putSerialLock">
            <summary>
            This is required to ensure serial generation of etags during puts
            </summary>
        </member>
        <member name="M:Raven.Database.DocumentDatabase.DisableAllTriggersForCurrentThread">
            <summary>
            This API is provided solely for the use of bundles that might need to run
            without any other bundle interfering. Specifically, the replication bundle
            need to be able to run without interference from any other bundle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Database.DocumentDatabase.GetTotalSizeOnDisk">
            <summary>
            Get the total size taken by the database on the disk.
            This explicitly does NOT include in memory indexes or in memory database.
            It does include any reserved space on the file system, which may significantly increase
            the database size.
            </summary>
            <remarks>
            This is a potentially a very expensive call, avoid making it if possible.
            </remarks>
        </member>
        <member name="P:Raven.Database.DocumentDatabase.Name">
            <summary>
            The name of the database.
            Defaults to null for the root database (or embedded database), or the name of the database if this db is a tenant database
            </summary>
        </member>
        <member name="P:Raven.Database.DocumentDatabase.ExtensionsState">
            <summary>
            This is used to hold state associated with this instance by external extensions
            </summary>
        </member>
        <member name="P:Raven.Database.DocumentDatabase.Disposed">
            <summary>
            Whatever this database has been disposed
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.AnonymousObjectToLuceneDocumentConverter.CreateFields(System.String,System.Object,Lucene.Net.Documents.Field.Store,System.Boolean)">
            <summary>
            This method generate the fields for indexing documents in lucene from the values.
            Given a name and a value, it has the following behavior:
            * If the value is enumerable, index all the items in the enumerable under the same field name
            * If the value is null, create a single field with the supplied name with the unanalyzed value 'NULL_VALUE'
            * If the value is string or was set to not analyzed, create a single field with the supplied name
            * If the value is date, create a single field with millisecond precision with the supplied name
            * If the value is numeric (int, long, double, decimal, or float) will create two fields:
            	1. with the supplied name, containing the numeric value as an unanalyzed string - useful for direct queries
            	2. with the name: name +'_Range', containing the numeric value in a form that allows range queries
            </summary>
        </member>
        <member name="T:Raven.Database.Linq.AbstractViewGenerator">
            <summary>
            This class represents a base class for all "Views" we generate and compile on the fly - all
            Map and MapReduce indexes are being re-written into this class and then compiled and executed
            against the data in RavenDB
            </summary>
        </member>
        <member name="T:Raven.Database.Linq.DynamicViewCompiler">
            <summary>
            	Takes two query expressions as strings, and compile them.
            	Along the way we apply some minimal transformations, the end result is an instance
            	of AbstractViewGenerator, representing the map/reduce functions
            </summary>
        </member>
        <member name="T:Raven.Database.Linq.IndexingFunc">
            <summary>
            	Defining the indexing function for a set of documents
            </summary>
        </member>
        <member name="T:Raven.Database.Linq.PrivateExtensions.LinqOnDynamic">
            <summary>
            	These methods allow the indexes to use Linq query syntax using dynamic
            </summary>
        </member>
        <member name="M:Raven.Database.Server.Responders.SuggestionResponder.Respond(Raven.Database.Server.Abstractions.IHttpContext)">
            <summary>
            Responds the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Raven.Database.Storage.ITransactionalStorage.Id">
            <summary>
            This is used mostly for replication
            </summary>
        </member>
        <member name="M:Raven.Database.Tasks.RemoveFromIndexTask.FilterDocuments(Raven.Database.Indexing.WorkContext,Raven.Database.Storage.IStorageActionsAccessor,System.String)">
            <summary>
            We need to NOT remove documents that has been removed then added.
            We DO remove documents that would be filtered out because of an Entity Name changed, though.
            </summary>
        </member>
        <member name="T:Raven.Database.Indexing.IndexStorage">
            <summary>
            	Thread safe, single instance for the entire application
            </summary>
        </member>
    </members>
</doc>
