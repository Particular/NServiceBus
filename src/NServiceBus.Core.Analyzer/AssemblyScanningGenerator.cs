#nullable enable
namespace NServiceBus.Core.Analyzer;

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

[Generator]
public sealed class AssemblyScanningGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx =>
        {
            ctx.AddSource("AssemblyScanningOptionsAttribute.g.cs", SourceText.From(SourceGenerationHelper.AssemblyScanningOptionsAttribute, Encoding.UTF8));
        });

        //context.SyntaxProvider.ForAttributeWithMetadataName()

        var sourceTypes = context.SyntaxProvider.CreateSyntaxProvider(
            predicate: static (node, _) => node is TypeDeclarationSyntax,
            transform: GetTypeFromGeneratorSyntaxContext);

        var metadataTypes = context.CompilationProvider
            .SelectMany((compilation, x) => GetAllTypes(compilation.GlobalNamespace))
            .Select(GetTypeData);

        var collectedSource = sourceTypes.Collect();
        var collectedMetadata = metadataTypes.Collect();

        var combined = collectedSource.Combine(collectedMetadata)
            .Select((tuple, cancellationToken) =>
            {
                var (src, meta) = tuple;
                return src.Concat(meta).ToImmutableArray();
            });

        context.RegisterSourceOutput(combined, (sourceProductionContext, matches) =>
        {
            var sb = new StringBuilder();
            sb.AppendLine("""
                          #nullable enable
                          // <auto-generated/>
                          namespace Generated
                          {
                           public static class Registry
                           {
                               public static readonly string[] Types = new string[]
                               {
                          """);

            foreach (var type in matches)
            {
                if (type is not null)
                {
                    sb.AppendLine($"            \"{type.Value.DisplayName}\",");
                }
            }

            sb.AppendLine("""
                                  };
                              }
                          }
                          """);

            sourceProductionContext.AddSource("Registry.g.cs", sb.ToString());
        });

    }

    static ScannedTypeInfo? GetTypeFromGeneratorSyntaxContext(GeneratorSyntaxContext context, CancellationToken cancellationToken)
    {
        var symbol = context.SemanticModel.GetDeclaredSymbol(context.Node, cancellationToken);
        return GetTypeData(symbol as INamedTypeSymbol, cancellationToken);
    }

    static ScannedTypeInfo? GetTypeData(INamedTypeSymbol? type, CancellationToken cancellationToken)
    {
        if (type is null || type.IsAnonymousType || type.IsImplicitlyDeclared || type.IsComImport || type.IsUnmanagedType || !type.CanBeReferencedByName)
        {
            return null;
        }

        if (!(type.ContainingNamespace?.Name.StartsWith("NServiceBus") ?? false))
        {
            return null;
        }

        return new ScannedTypeInfo(type.ToDisplayString());
    }

    static IEnumerable<INamedTypeSymbol> GetAllTypes(INamespaceSymbol ns)
    {
        foreach (var type in ns.GetTypeMembers())
        {
            yield return type;

            foreach (var nested in GetAllTypes(type))
            {
                yield return nested;
            }
        }

        foreach (var nestedNs in ns.GetNamespaceMembers())
        {
            foreach (var type in GetAllTypes(nestedNs))
            {
                yield return type;
            }
        }
    }

    static IEnumerable<INamedTypeSymbol> GetAllTypes(INamedTypeSymbol type)
    {
        foreach (var nested in type.GetTypeMembers())
        {
            yield return nested;
            foreach (var t in GetAllTypes(nested))
            {
                yield return t;
            }
        }
    }
}

public class SourceGenerationHelper
{
    public const string AssemblyScanningOptionsAttribute = "";
}

record struct ScannedTypeInfo(string DisplayName);