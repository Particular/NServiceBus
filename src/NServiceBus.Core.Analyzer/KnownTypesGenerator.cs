#nullable enable
namespace NServiceBus.Core.Analyzer;

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

[Generator]
public sealed class KnownTypesGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // context.RegisterPostInitializationOutput(ctx =>
        // {
        //     ctx.AddSource("FakeStuffForNow.g.cs", SourceText.From(SourceGenerationHelper.FakeStuffForNow, Encoding.UTF8));
        // });

        //context.SyntaxProvider.ForAttributeWithMetadataName()

        var markerTypes = context.CompilationProvider.Select((compilation, cancellationToken) =>
        {
            return MarkerTypeInfos
                .Select(info => compilation.GetTypeByMetadataName(info.TypeName))
                .ToImmutableArray();
        });

        var sourceTypes = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => node is TypeDeclarationSyntax,
                transform: GetNamedTypeFromGeneratorSyntaxContext)
            .Where(type => type is not null);

        var relevantTypes = sourceTypes.Combine(markerTypes)
            .Where(pair =>
            {
                var (type, markerTypeSymbols) = pair;
                return markerTypeSymbols.Any(markerType => IsAssignableTo(type!, markerType!));
            })
            .Where(pair => pair.Left is not null)
            .Select((pair, cancellationToken) => new ScannedTypeInfo(pair.Left!.ToDisplayString()));

        var collected = relevantTypes.Collect();

        // Instead of RegisterSourceOutput because it doesn't need to be directly called from anything
        // but generated sources - not having it is not going to cause red squigglies
        // https://andrewlock.net/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/#7-consider-using-registerimplementationsourceoutput-instead-of-registersourceoutput
        context.RegisterImplementationSourceOutput(collected, (sourceProductionContext, matches) =>
        {
            var sb = new StringBuilder();
            sb.AppendLine("""
                          #nullable enable
                          // <auto-generated/>
                          namespace Generated
                          {
                              public static class Registry
                              {
                                  public static readonly System.Type[] Types = new System.Type[]
                                  {
                          """);

            foreach (var type in matches)
            {
                sb.AppendLine($"            typeof({type.DisplayName}),");
            }

            sb.AppendLine("""
                                  };
                              }
                          }
                          """);

            sourceProductionContext.AddSource("Registry.g.cs", sb.ToString());
        });
    }

    // Customized version that treats IHandleMessages<RealType> the same as IHandleMessages<T>
    static bool IsAssignableTo(INamedTypeSymbol type, INamedTypeSymbol target)
    {
        if (SymbolEqualityComparer.Default.Equals(type, target))
        {
            return true;
        }

        if (target.TypeKind == TypeKind.Interface)
        {
            //return type.AllInterfaces.Any(i => SymbolEqualityComparer.Default.Equals(i, target));
            foreach (var iface in type.AllInterfaces)
            {
                if (SymbolEqualityComparer.Default.Equals(iface.OriginalDefinition, target))
                {
                    return true;
                }
            }

            return false;
        }

        // walk base types
        var baseType = type.BaseType;
        while (baseType != null)
        {
            if (SymbolEqualityComparer.Default.Equals(baseType, target))
            {
                return true;
            }

            baseType = baseType.BaseType;
        }

        return false;
    }

    static readonly ImmutableArray<MarkerTypeInfo> MarkerTypeInfos =
    [
        new ("NServiceBus.IEvent", "AddEvent"),
        new ("NServiceBus.ICommand", "AddCommand"),
        new ("NServiceBus.IMessage", "AddMessage"),
        new ("NServiceBus.IHandleMessages`1", "AddHandler"),
        new ("NServiceBus.Installation.INeedToInstallSomething", "AddInstaller"),
    ];

    public record struct MarkerTypeInfo(string TypeName, string RegisterMethod);

    static INamedTypeSymbol? GetNamedTypeFromGeneratorSyntaxContext(GeneratorSyntaxContext context, CancellationToken cancellationToken)
    {
        var symbol = context.SemanticModel.GetDeclaredSymbol(context.Node, cancellationToken);

        if (symbol is not INamedTypeSymbol type)
        {
            return null;
        }

        if (type.IsAnonymousType || type.IsImplicitlyDeclared || type.IsComImport || type.IsUnmanagedType || !type.CanBeReferencedByName)
        {
            return null;
        }

        return type;
    }

    record struct ScannedTypeInfo(string DisplayName);
}

[Generator]
public sealed class CombinedGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx =>
        {
            ctx.AddSource("AssemblyScanningOptionsAttribute.g.cs", SourceText.From(SourceGenerationHelper.FakeStuffForNow, Encoding.UTF8));
        });

        //context.SyntaxProvider.ForAttributeWithMetadataName()

        var sourceTypes = context.SyntaxProvider.CreateSyntaxProvider(
            predicate: static (node, _) => node is TypeDeclarationSyntax,
            transform: GetTypeFromGeneratorSyntaxContext);

        var metadataTypes = context.CompilationProvider
            .SelectMany((compilation, x) => GetAllTypes(compilation.GlobalNamespace))
            .Select(GetTypeData);

        var collectedSource = sourceTypes.Collect();
        var collectedMetadata = metadataTypes.Collect();

        var combined = collectedSource.Combine(collectedMetadata)
            .Select((tuple, cancellationToken) =>
            {
                var (src, meta) = tuple;
                return src.Concat(meta).ToImmutableArray();
            });

        // Instead of RegisterSourceOutput because it doesn't need to be directly called from anything
        // but generated sources - not having it is not going to cause red squigglies
        // https://andrewlock.net/creating-a-source-generator-part-9-avoiding-performance-pitfalls-in-incremental-generators/#7-consider-using-registerimplementationsourceoutput-instead-of-registersourceoutput
        context.RegisterImplementationSourceOutput(combined, (sourceProductionContext, matches) =>
        {
            var sb = new StringBuilder();
            sb.AppendLine("""
                          #nullable enable
                          // <auto-generated/>
                          namespace Generated
                          {
                           public static class Registry
                           {
                               public static readonly string[] Types = new string[]
                               {
                          """);

            foreach (var type in matches)
            {
                if (type is not null)
                {
                    sb.AppendLine($"            \"{type.Value.DisplayName}\",");
                }
            }

            sb.AppendLine("""
                                  };
                              }
                          }
                          """);

            sourceProductionContext.AddSource("Registry.g.cs", sb.ToString());
        });

    }

    static ScannedTypeInfo? GetTypeFromGeneratorSyntaxContext(GeneratorSyntaxContext context, CancellationToken cancellationToken)
    {
        var symbol = context.SemanticModel.GetDeclaredSymbol(context.Node, cancellationToken);
        return GetTypeData(symbol as INamedTypeSymbol, cancellationToken);
    }

    static ScannedTypeInfo? GetTypeData(INamedTypeSymbol? type, CancellationToken cancellationToken)
    {
        if (type is null || type.IsAnonymousType || type.IsImplicitlyDeclared || type.IsComImport || type.IsUnmanagedType || !type.CanBeReferencedByName)
        {
            return null;
        }

        if (!(type.ContainingNamespace?.Name.StartsWith("NServiceBus") ?? false))
        {
            return null;
        }

        return new ScannedTypeInfo(type.ToDisplayString());
    }

    static IEnumerable<INamedTypeSymbol> GetAllTypes(INamespaceSymbol ns)
    {
        foreach (var type in ns.GetTypeMembers())
        {
            yield return type;

            foreach (var nested in GetAllTypes(type))
            {
                yield return nested;
            }
        }

        foreach (var nestedNs in ns.GetNamespaceMembers())
        {
            foreach (var type in GetAllTypes(nestedNs))
            {
                yield return type;
            }
        }
    }

    static IEnumerable<INamedTypeSymbol> GetAllTypes(INamedTypeSymbol type)
    {
        foreach (var nested in type.GetTypeMembers())
        {
            yield return nested;
            foreach (var t in GetAllTypes(nested))
            {
                yield return t;
            }
        }
    }

    record struct ScannedTypeInfo(string DisplayName);
}

public class SourceGenerationHelper
{
    public const string FakeStuffForNow = "";
}